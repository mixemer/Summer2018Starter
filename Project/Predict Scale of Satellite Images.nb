(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    622794,      12207]
NotebookOptionsPosition[    610832,      12021]
NotebookOutlinePosition[    611234,      12039]
CellTagsIndexPosition[    611191,      12036]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Predict the Scale of Satellite Images", "Title",
 CellChangeTimes->{{3.7394623474184437`*^9, 
  3.739462351757989*^9}},ExpressionUUID->"755e0098-9782-4df5-8299-\
7f54266c54d6"],

Cell["Some explanation", "Abstract",ExpressionUUID->"db4efd27-b72d-4835-a486-b18956bba0cb"],

Cell["Mehmet Sahin, Jun. 26,  2018", "AuthorInfo",ExpressionUUID->"59a63784-4e95-46b9-9a1d-2c013f47161b"],

Cell["", "Text",ExpressionUUID->"85271f44-5b04-421c-bf31-0395fab10c35"],

Cell["Some explanation", "Text",ExpressionUUID->"a6bd12b6-0886-47fc-9fa5-02f0e3c1bd26"],

Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.739887411712264*^9, 3.739887412111669*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"22b4bc45-b013-4ce9-96fe-d07a51d37430"],

Cell[CellGroupData[{

Cell["Collect Satellite Images", "Section",ExpressionUUID->"35feb7e4-4e93-4e64-abc0-7b0b86e8128f"],

Cell[TextData[StyleBox["In this section, we will get the data using GeoImage.",
 FontColor->GrayLevel[0.5],
 Background->GrayLevel[1]]], "Text",ExpressionUUID->"55ddc81f-fcf7-4026-af30-\
c2c4c901f21b"],

Cell["Some explanation", "Text",ExpressionUUID->"dc3fa30d-000e-45b8-9f6e-f2ffca697a75"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7394827566211348`*^9, 3.739482759628078*^9}, {
  3.7396500673775787`*^9, 3.739650072436092*^9}, {3.739725729121914*^9, 
  3.739725730835137*^9}, {3.73973377522888*^9, 3.739733779206121*^9}, {
  3.739809215679933*^9, 3.739809219690433*^9}, {3.739811792757412*^9, 
  3.73981179607034*^9}, {3.739814250235441*^9, 3.739814252265829*^9}, {
  3.739828999105218*^9, 3.739829002057686*^9}, {3.739928259231123*^9, 
  3.7399282608629847`*^9}, {3.739931348345688*^9, 3.739931350834174*^9}, {
  3.739933715525322*^9, 
  3.739933719481793*^9}},ExpressionUUID->"fc097bea-1c77-45d9-b139-\
f63fc32e60f7"],

Cell["Create a function to get countries\[CloseCurlyQuote] geo positions \
randomly:", "CodeText",ExpressionUUID->"d4717b68-e7a9-459d-b0b1-28ff62c78660"],

Cell[BoxData[
 RowBox[{
  RowBox[{"geoPositionOfCountry", "[", 
   RowBox[{
   "entities_", ",", "numberOfPosition_Integer", ",", "folderName_String"}], 
   "]"}], " ", ":=", "\[IndentingNewLine]", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"countries", ",", " ", "mesh"}], "}"}], ",", 
    "\[IndentingNewLine]", "\t\t", 
    RowBox[{
     RowBox[{"countries", " ", "=", " ", "entities"}], ";", 
     "\[IndentingNewLine]", "\t\t", 
     RowBox[{"mesh", " ", "=", " ", 
      RowBox[{"DiscretizeGraphics", "@", 
       RowBox[{"EntityValue", "[", 
        RowBox[{"countries", ",", "\"\<Polygon\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\t\t", 
     RowBox[{"SeedRandom", "[", 
      RowBox[{"Hash", "@", 
       RowBox[{"{", 
        RowBox[{"folderName", ",", "countries"}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\t\t", 
     RowBox[{"Reverse", "[", 
      RowBox[{
       RowBox[{"RandomPoint", "[", 
        RowBox[{"mesh", ",", "numberOfPosition"}], "]"}], ",", 
       RowBox[{"{", "2", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "\t", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.739879708575444*^9, 3.739879741089508*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"bc28cecf-a8f1-44a1-9a88-a545439b7d8a"],

Cell["\<\
Let\[CloseCurlyQuote]s plot them and see how those random positions act on a \
Graphic\
\>", "CodeText",ExpressionUUID->"7fc79341-27e5-45f6-b25b-6a94bb02c292"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"trainingDataOfCountry", " ", "=", " ", 
     RowBox[{"geoPositionOfCountry", "[", 
      RowBox[{
       RowBox[{"{", 
        TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
            RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
          "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"","\"country\""},
         "Entity"], "}"}], ",", "500", ",", "\"\<training\>\""}], "]"}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"validationDataOfCountry", " ", "=", " ", 
     RowBox[{"geoPositionOfCountry", "[", 
      RowBox[{
       RowBox[{"{", 
        TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
            RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
          "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"","\"country\""},
         "Entity"], "}"}], ",", "100", ",", "\"\<validation\>\""}], "]"}]}], 
    ";", "\n", 
    RowBox[{"testingDataOfCountry", " ", "=", " ", 
     RowBox[{"geoPositionOfCountry", "[", 
      RowBox[{
       RowBox[{"{", 
        TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
            RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
          "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"","\"country\""},
         "Entity"], "}"}], ",", "25", ",", "\"\<testing\>\""}], "]"}]}], 
    ";"}], "*)"}], "\n", "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"trainingDataOfCities", " ", "=", " ", 
     RowBox[{"geoPositionOfCountry", "[", 
      RowBox[{
       RowBox[{"{", 
        InterpretationBox[
         DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
          
          TemplateBox[{
           TemplateBox[{"\"cities\""}, "ImplicitEntityClassBase"],TagBox[
             GridBox[{{
                TemplateBox[{
                  TemplateBox[{"\"country\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Country\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Country\\\"]\""}, 
                   "GrayEntityFrame"], "\":\"", 
                  TemplateBox[{"\"United States\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", 
                    "\"country\""}, "Entity"]}, "ImplicitEntityInfoRow"]}, {
                TemplateBox[{
                  TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""}, 
                   "GrayEntityFrame"], "\":\"", 
                  RowBox[{"TakeLargest", "[", "15", "]"}]}, 
                 "ImplicitEntityInfoRow"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "GeneralizedEntityInfoGrid", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"],Dynamic[EntityFramework`Formatting`Private`open],
            "\"EntityClass[\\\"City\\\", {EntityProperty[\\\"City\\\", \
\\\"Country\\\"] -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"], \
EntityProperty[\\\"City\\\", \\\"Population\\\"] -> TakeLargest[15]}]\"",
            TemplateBox[{
             "\"(\"", "\"15 largest citites of United States\"", "\")\""}, 
             "RowDefault"]},
           "ImplicitEntityToggleLabeled"]],
         EntityClass[
         "City", {
          EntityProperty["City", "Country"] -> 
           Entity["Country", "UnitedStates"], 
           EntityProperty["City", "Population"] -> TakeLargest[15]}],
         SelectWithContents->True], "}"}], ",", "850", ",", 
       "\"\<training\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"validationDataOfCities", " ", "=", " ", 
     RowBox[{"geoPositionOfCountry", "[", 
      RowBox[{
       RowBox[{"{", 
        InterpretationBox[
         DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
          TemplateBox[{
           TemplateBox[{"\"cities\""}, "ImplicitEntityClassBase"],TagBox[
             GridBox[{{
                TemplateBox[{
                  TemplateBox[{"\"country\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Country\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Country\\\"]\""}, 
                   "GrayEntityFrame"], "\":\"", 
                  TemplateBox[{"\"United States\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", 
                    "\"country\""}, "Entity"]}, "ImplicitEntityInfoRow"]}, {
                TemplateBox[{
                  TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""}, 
                   "GrayEntityFrame"], "\":\"", 
                  RowBox[{"TakeLargest", "[", "15", "]"}]}, 
                 "ImplicitEntityInfoRow"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "GeneralizedEntityInfoGrid", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"],Dynamic[EntityFramework`Formatting`Private`open],
            "\"EntityClass[\\\"City\\\", {EntityProperty[\\\"City\\\", \
\\\"Country\\\"] -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"], \
EntityProperty[\\\"City\\\", \\\"Population\\\"] -> TakeLargest[15]}]\"",
            TemplateBox[{
             "\"(\"", "\"15 largest citites of United States\"", "\")\""}, 
             "RowDefault"]},
           "ImplicitEntityToggleLabeled"]],
         EntityClass[
         "City", {
          EntityProperty["City", "Country"] -> 
           Entity["Country", "UnitedStates"], 
           EntityProperty["City", "Population"] -> TakeLargest[15]}],
         SelectWithContents->True], "}"}], ",", "100", ",", 
       "\"\<validation\>\""}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"testingDataOfCities", " ", "=", " ", 
     RowBox[{"geoPositionOfCountry", "[", 
      RowBox[{
       RowBox[{"{", 
        InterpretationBox[
         DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
          
          TemplateBox[{
           TemplateBox[{"\"cities\""}, "ImplicitEntityClassBase"],TagBox[
             GridBox[{{
                TemplateBox[{
                  TemplateBox[{"\"country\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Country\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Country\\\"]\""}, 
                   "GrayEntityFrame"], "\":\"", 
                  TemplateBox[{"\"United States\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
                    "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", 
                    "\"country\""}, "Entity"]}, "ImplicitEntityInfoRow"]}, {
                TemplateBox[{
                  TemplateBox[{"\"city population\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                    "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""}, 
                   "GrayEntityFrame"], "\":\"", 
                  RowBox[{"TakeLargest", "[", "15", "]"}]}, 
                 "ImplicitEntityInfoRow"]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "GeneralizedEntityInfoGrid", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"],Dynamic[EntityFramework`Formatting`Private`open],
            "\"EntityClass[\\\"City\\\", {EntityProperty[\\\"City\\\", \
\\\"Country\\\"] -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"], \
EntityProperty[\\\"City\\\", \\\"Population\\\"] -> TakeLargest[15]}]\"",
            TemplateBox[{
             "\"(\"", "\"15 largest citites of United States\"", "\")\""}, 
             "RowDefault"]},
           "ImplicitEntityToggleLabeled"]],
         EntityClass[
         "City", {
          EntityProperty["City", "Country"] -> 
           Entity["Country", "UnitedStates"], 
           EntityProperty["City", "Population"] -> TakeLargest[15]}],
         SelectWithContents->True], "}"}], ",", "50", ",", 
       "\"\<testing\>\""}], "]"}]}], ";"}], "\n", "\n", 
   RowBox[{"GeoListPlot", "@", 
    RowBox[{"GeoPosition", "@", "trainingDataOfCountry"}]}], "\n", 
   RowBox[{"GeoListPlot", "@", 
    RowBox[{"GeoPosition", "@", "trainingDataOfCities"}]}]}]}]], "Code",
 CellChangeTimes->{{3.739291823510951*^9, 3.739291830428965*^9}, {
   3.7394446068843403`*^9, 3.7394446250429773`*^9}, 3.739445822407168*^9, 
   3.7394790893416367`*^9, {3.7394818175765*^9, 3.739481830322919*^9}, {
   3.739481927215184*^9, 3.7394819276987762`*^9}, {3.739482197758955*^9, 
   3.739482197912353*^9}, {3.7394826602296886`*^9, 3.739482660964951*^9}, 
   3.739482749167656*^9, {3.739483666475519*^9, 3.739483687541803*^9}, {
   3.739483758386856*^9, 3.7394837971786203`*^9}, {3.7394838366156693`*^9, 
   3.739483842840086*^9}, {3.739483892441947*^9, 3.739483905044877*^9}, {
   3.739484066550593*^9, 3.7394840899146757`*^9}, {3.7394851564120207`*^9, 
   3.739485161290669*^9}, {3.739493069017714*^9, 3.7394930703322678`*^9}, {
   3.739493399610229*^9, 3.73949339988568*^9}, {3.739493669129137*^9, 
   3.739493672817224*^9}, {3.739493818009707*^9, 3.7394938218099623`*^9}, {
   3.7395743419713383`*^9, 3.73957434216625*^9}, {3.7397244872708883`*^9, 
   3.739724614308051*^9}, {3.739725021006192*^9, 3.7397250611754208`*^9}, {
   3.739725095260007*^9, 3.739725097694481*^9}, {3.739725153751787*^9, 
   3.73972516459629*^9}, {3.739725214767887*^9, 3.739725217975443*^9}, {
   3.73973379581155*^9, 3.739733889168455*^9}, {3.7397833629535313`*^9, 
   3.7397833728753223`*^9}, 3.739783733493965*^9, {3.739897430808552*^9, 
   3.7398974361857777`*^9}, 
   3.739927345542796*^9},ExpressionUUID->"0da66e61-053c-44ed-bd6f-\
ec8918405511"],

Cell["Old normaliser function:", "Text",
 CellChangeTimes->{{3.7399271131764307`*^9, 3.7399271135523443`*^9}, {
  3.739928066978146*^9, 3.739928077586648*^9}, {3.739928275039837*^9, 
  3.739928287350464*^9}, {3.739928371958851*^9, 3.739928373680492*^9}, {
  3.739928435783928*^9, 3.7399284711063633`*^9}, {3.7399286892879677`*^9, 
  3.739928717672029*^9}, {3.739940127296605*^9, 3.739940127477558*^9}, {
  3.739979626701789*^9, 
  3.7399796519388437`*^9}},ExpressionUUID->"4ea8a707-3846-4a26-afa2-\
9930e6cf1566"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"b", " ", "=", " ", 
    RowBox[{"geoPositionOfCountry", "[", 
     RowBox[{
      RowBox[{"{", 
       InterpretationBox[
        DynamicModuleBox[{EntityFramework`Formatting`Private`open = False}, 
         TemplateBox[{
          TemplateBox[{"\"cities\""}, "ImplicitEntityClassBase"],TagBox[
            GridBox[{{
               TemplateBox[{
                 TemplateBox[{"\"country\"", 
                   RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Country\""}], "]"}], 
                   "\"EntityProperty[\\\"City\\\", \\\"Country\\\"]\""}, 
                  "GrayEntityFrame"], "\":\"", 
                 TemplateBox[{"\"United States\"", 
                   RowBox[{"Entity", "[", 
                    RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}], 
                   "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"", 
                   "\"country\""}, "Entity"]}, "ImplicitEntityInfoRow"]}, {
               TemplateBox[{
                 TemplateBox[{"\"city population\"", 
                   RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"City\"", ",", "\"Population\""}], "]"}], 
                   "\"EntityProperty[\\\"City\\\", \\\"Population\\\"]\""}, 
                  "GrayEntityFrame"], "\":\"", 
                 RowBox[{"TakeLargest", "[", "15", "]"}]}, 
                "ImplicitEntityInfoRow"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
             "GeneralizedEntityInfoGrid", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"],Dynamic[EntityFramework`Formatting`Private`open],
           "\"EntityClass[\\\"City\\\", {EntityProperty[\\\"City\\\", \
\\\"Country\\\"] -> Entity[\\\"Country\\\", \\\"UnitedStates\\\"], \
EntityProperty[\\\"City\\\", \\\"Population\\\"] -> TakeLargest[15]}]\"",
           TemplateBox[{
            "\"(\"", "\"15 largest citites of United States\"", "\")\""}, 
            "RowDefault"]},
          "ImplicitEntityToggleLabeled"]],
        EntityClass[
        "City", {
         EntityProperty["City", "Country"] -> 
          Entity["Country", "UnitedStates"], 
          EntityProperty["City", "Population"] -> TakeLargest[15]}],
        SelectWithContents->True], "}"}], ",", "50", ",", "\"\<testing\>\""}],
      "]"}]}], ";", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"ClearAll", "[", 
      RowBox[{"getZoomLevel", ",", " ", "getGeoRange"}], "]"}], "\n", 
     RowBox[{"SetAttributes", "[", 
      RowBox[{"getGeoRange", ",", " ", "Listable"}], "]"}], "\n", 
     RowBox[{"(*", 
      RowBox[{"Rondom", " ", "point", " ", "distrubition"}], "*)"}], "\n", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"getZoomLevel", "[", 
         RowBox[{"point_List", ",", "max_"}], "]"}], " ", ":=", " ", 
        "\[IndentingNewLine]", "\t", 
        RowBox[{"With", "[", "\[IndentingNewLine]", "\t\t", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"cutoff", " ", "=", " ", "0.05"}], "}"}], ",", 
          "\[IndentingNewLine]", "\t\t", 
          RowBox[{
           RowBox[{"SeedRandom", "[", 
            RowBox[{"Hash", "[", "point", "]"}], "]"}], ";", " ", "\n", 
           "\t\t", 
           RowBox[{
            RowBox[{"Clip", "[", 
             RowBox[{
              RowBox[{"RandomVariate", "[", 
               RowBox[{"HalfNormalDistribution", "[", " ", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"max", "\[LessEqual]", "10"}], ",", "2", ",", "5"}],
                  "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"1", " ", "-", " ", "cutoff"}]}], "}"}]}], "]"}], " ",
             "+", " ", "cutoff"}]}]}], "\[IndentingNewLine]", "\t", "]"}]}], 
       ";"}], "*)"}], "\n", 
     RowBox[{"getZoomLevel", "[", "]"}]}], " ", ":=", " ", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{"With", "[", "\[IndentingNewLine]", "\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"random", " ", "=", 
        RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]",
       "\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"random", "<", "0.1"}], ",", "0.1", ",", "random"}], "]"}]}], 
     "  ", 
     RowBox[{"(*", "0.2", "*)"}], "  ", "\[IndentingNewLine]", "\t", "]"}]}], 
   ";", "\n", "\n", 
   RowBox[{"randomPoints", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"getZoomLevel", "[", "]"}], "&"}], " ", "/@", " ", "b"}]}], ";",
    " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ListPlot", "[", "randomPoints", "]"}], "\n", 
     RowBox[{"Histogram", "[", 
      RowBox[{"randomPoints", ",", 
       RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], 
     "\[IndentingNewLine]", "randomPoints", "\n", 
     RowBox[{"Count", "[", 
      RowBox[{"randomPoints", ",", 
       RowBox[{"y_", "/;", 
        RowBox[{"y", "<", "0.5"}]}]}], "]"}], "\[IndentingNewLine]", "\n", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{"getGeoRange", "[", 
         RowBox[{"zoom_", ",", "max_"}], "]"}], " ", ":=", " ", 
        RowBox[{"zoom", " ", "*", " ", "max"}]}], ";"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"getGeoRange", "[", 
      RowBox[{"zoom_", ",", "max_"}], "]"}]}], " ", ":=", " ", 
    RowBox[{"Round", "[", 
     RowBox[{
      RowBox[{"zoom", " ", "*", " ", "max"}], ",", "0.1"}], "]"}]}], ";", " ", 
   RowBox[{"(*", 
    RowBox[{"no", " ", 
     RowBox[{"round", " ", "!"}]}], "*)"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeoRange", "[", 
      RowBox[{"#", ",", "10"}], "]"}], "&"}], " ", "/@", "  ", 
    "randomPoints"}]}], "*)"}]], "Code",
 CellChangeTimes->{
  3.7392916805825777`*^9, {3.739291846322115*^9, 3.739291849888166*^9}, {
   3.739291946658621*^9, 3.7392919733443108`*^9}, 3.73945113933464*^9, {
   3.739493164601488*^9, 3.739493164847549*^9}, {3.739493225238171*^9, 
   3.739493225932385*^9}, {3.7394939518362217`*^9, 3.739493964987117*^9}, {
   3.739494002479945*^9, 3.739494004428215*^9}, {3.739494130977785*^9, 
   3.7394941311806383`*^9}, {3.739494202283257*^9, 3.739494202429636*^9}, {
   3.7396543684062557`*^9, 3.73965437782983*^9}, {3.7397252504099283`*^9, 
   3.7397252625539827`*^9}, {3.73972532381785*^9, 3.739725337682412*^9}, {
   3.7397254464405403`*^9, 3.739725502896632*^9}, {3.739725539225658*^9, 
   3.73972554958965*^9}, {3.7397255902075577`*^9, 3.739725604152975*^9}, {
   3.739726454986574*^9, 3.739726456812359*^9}, {3.7397268196015263`*^9, 
   3.739726821583632*^9}, {3.7397833903194447`*^9, 3.739783400936098*^9}, {
   3.739783719981243*^9, 3.739783723224659*^9}, {3.739809316095455*^9, 
   3.739809331020344*^9}, {3.739809525166072*^9, 3.7398095255001707`*^9}, {
   3.739809560677484*^9, 3.739809560843652*^9}, {3.739809662853681*^9, 
   3.7398096706827908`*^9}, {3.739811512905892*^9, 3.739811524670405*^9}, {
   3.7398116564839153`*^9, 3.739811670872407*^9}, {3.739879929517581*^9, 
   3.739880007391341*^9}, {3.73988004698617*^9, 3.7398800475835667`*^9}, {
   3.7398801398842087`*^9, 3.739880161275668*^9}, {3.7398945055442333`*^9, 
   3.739894515041387*^9}, 3.7398948017953653`*^9, {3.7398948962317457`*^9, 
   3.739894896910124*^9}, {3.7398950085800657`*^9, 3.739895026074326*^9}, {
   3.739895058350432*^9, 3.739895190872424*^9}, {3.739895263212628*^9, 
   3.739895270712384*^9}, {3.739895684034981*^9, 3.739895711586602*^9}, {
   3.739895918771041*^9, 3.739896006735078*^9}, {3.739896153599454*^9, 
   3.739896216930295*^9}, {3.7398968544073467`*^9, 3.739896861210116*^9}, {
   3.7398976256990213`*^9, 3.739897637658195*^9}, {3.739897682090413*^9, 
   3.739897691829702*^9}, 3.7399224536456127`*^9, {3.739926366976944*^9, 
   3.7399264777685337`*^9}, {3.7399265098400373`*^9, 3.739926694893462*^9}, 
   3.739926765164899*^9, {3.739926798987042*^9, 3.739926815465562*^9}, {
   3.739926895618112*^9, 3.739926929270643*^9}, {3.739927034565695*^9, 
   3.739927183156316*^9}, {3.739927217820409*^9, 3.739927254605204*^9}, {
   3.739928087541956*^9, 3.7399280977092876`*^9}, {3.7399282243051043`*^9, 
   3.7399282249824677`*^9}, {3.739928420026648*^9, 3.739928429654377*^9}, {
   3.739928462657641*^9, 3.739928574619898*^9}, {3.7399286517710037`*^9, 
   3.739928703960869*^9}, {3.739928739634615*^9, 3.739928760275495*^9}, 
   3.739929013566724*^9, {3.739929071951169*^9, 3.739929094719977*^9}, {
   3.739929269447188*^9, 3.739929270113811*^9}, {3.739929323995867*^9, 
   3.739929325015452*^9}, {3.739929392246563*^9, 3.739929393552084*^9}, 
   3.739930528196782*^9, {3.739931319659486*^9, 3.7399313233220377`*^9}, {
   3.739931424290183*^9, 3.739931431263658*^9}, {3.73993175552175*^9, 
   3.739931781445465*^9}, {3.739939476469105*^9, 3.739939491819043*^9}, {
   3.7399397840768633`*^9, 3.739939790206036*^9}, {3.739940088545759*^9, 
   3.739940100509432*^9}, {3.7399401883277082`*^9, 3.73994018879974*^9}, {
   3.739941730828504*^9, 3.7399417775947323`*^9}, {3.739976535557417*^9, 
   3.739976535819899*^9}, {3.739979628516128*^9, 3.7399796571556997`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"4397839f-173c-446c-baa3-710888ff32b1"],

Cell["New normaliser function for geo range:", "Text",
 CellChangeTimes->{{3.7399271131764307`*^9, 3.7399271135523443`*^9}, {
  3.739928066978146*^9, 3.739928077586648*^9}, {3.739928275039837*^9, 
  3.739928287350464*^9}, {3.739928371958851*^9, 3.739928373680492*^9}, {
  3.739928435783928*^9, 3.7399284711063633`*^9}, {3.7399286892879677`*^9, 
  3.739928717672029*^9}, {3.739940127296605*^9, 3.739940127477558*^9}, {
  3.739979626701789*^9, 3.7399796519388437`*^9}, {3.7399797054795303`*^9, 
  3.73997970987617*^9}},ExpressionUUID->"adddfb01-21a0-49b6-a505-\
59ff331b99aa"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", 
  RowBox[{"pointRange", ",", " ", "rescale"}], "]"}], "\n", 
 RowBox[{"SetAttributes", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"rescale", ",", " ", "revertRescale"}], "}"}], ",", " ", 
   "Listable"}], "]"}], "\n", 
 RowBox[{
  RowBox[{"$minscale", " ", "=", " ", "0.2"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"$maxscale", " ", "=", " ", "8000"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"function", " ", "=", " ", 
   RowBox[{"Function", "[", 
    RowBox[{"#", "^", "6"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"rescale", "[", 
   RowBox[{"x_", ",", " ", 
    RowBox[{"min_:", " ", "$minscale"}], ",", " ", 
    RowBox[{"max_:", " ", "$maxscale"}]}], "]"}], " ", ":=", " ", "\n", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", " ", "-", " ", "min"}], ")"}], " ", "/", " ", 
   RowBox[{"(", 
    RowBox[{"max", " ", "-", " ", "min"}], ")"}]}]}], "\n", 
 RowBox[{
  RowBox[{"revertRescale", "[", 
   RowBox[{"x_", ",", " ", 
    RowBox[{"min_:", " ", "$minscale"}], ",", " ", 
    RowBox[{"max_:", " ", "$maxscale"}]}], "]"}], " ", ":=", " ", "\n", " ", 
  RowBox[{"min", " ", "+", " ", 
   RowBox[{"x", " ", "*", " ", 
    RowBox[{"(", 
     RowBox[{"max", " ", "-", " ", "min"}], ")"}]}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pointRange", "[", 
    RowBox[{"zmin_", ",", " ", "zmax_", ",", " ", 
     RowBox[{"length_:", " ", "10"}]}], "]"}], "  ", ":=", " ", "\n", " ", 
   RowBox[{"Table", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"rescale", "[", "x", "]"}], ",", " ", "\n", "  ", 
     RowBox[{"{", 
      RowBox[{"x", ",", " ", "zmin", ",", " ", "zmax", ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"zmax", " ", "-", " ", "zmin"}], ")"}], " ", "/", " ", 
        RowBox[{"(", 
         RowBox[{"length", " ", "-", " ", "1"}], ")"}]}]}], "}"}]}], "\n", 
    "  ", "]"}]}], "\n", "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"test", "[", 
    RowBox[{"zmin_", ",", " ", "zmax_", ",", " ", 
     RowBox[{"length_:", " ", "10"}]}], "]"}], " ", ":=", " ", 
   RowBox[{"Column", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "\n", "    ", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"#", ",", " ", 
               RowBox[{"function", "[", "#", "]"}]}], "}"}], " ", "&"}], ",", 
            " ", 
            RowBox[{"pointRange", "[", 
             RowBox[{"zmin", ",", " ", "zmax", ",", " ", "length"}], "]"}]}], 
           "]"}], ",", " ", "\n", "     ", 
          RowBox[{"PlotRange", " ", "->", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "1"}], "}"}]}], "}"}]}]}], "]"}], ",", 
        "\n", "    ", 
        RowBox[{"ListPlot", "[", "\n", "     ", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"#", ",", " ", 
               RowBox[{"function", "[", "#", "]"}]}], "}"}], " ", "&"}], ",", 
            " ", "\n", "      ", 
            RowBox[{"pointRange", "[", 
             RowBox[{
             "$minscale", ",", " ", "$maxscale", " ", ",", " ", "length"}], 
             "]"}]}], "]"}], ",", " ", "\n", "     ", 
          RowBox[{"PlotRange", " ", "->", " ", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "1"}], "}"}]}], "}"}]}]}], "]"}]}], "\n",
        "    ", "}"}], ",", " ", 
      RowBox[{"{", "\n", "    ", 
       RowBox[{
        RowBox[{"Histogram", " ", "@", " ", 
         RowBox[{"Map", "[", 
          RowBox[{"function", ",", " ", 
           RowBox[{"pointRange", "[", 
            RowBox[{"zmin", ",", " ", "zmax", ",", " ", "length"}], "]"}]}], 
          "]"}]}], ",", "\n", "    ", 
        RowBox[{"Histogram", " ", "@", " ", "\n", "     ", 
         RowBox[{"Map", "[", 
          RowBox[{"function", ",", " ", 
           RowBox[{"pointRange", "[", 
            RowBox[{
            "$minscale", ",", " ", "$maxscale", " ", ",", " ", "length"}], 
            "]"}]}], "]"}]}]}], "\n", "    ", "}"}]}], "\n", "   ", "}"}], 
    "]"}]}], "\n", "   ", "\n", "   "}], "\n", 
 RowBox[{
  RowBox[{"range", " ", "=", " ", 
   RowBox[{"pointRange", "[", 
    RowBox[{"7000", ",", " ", "8000", ",", " ", "10"}], "]"}]}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"LINEAR", " ", "we", " ", 
    RowBox[{"don", "'"}], "t", " ", "use", " ", "them"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"rescaled", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"function", ",", " ", 
     RowBox[{"rescale", "[", 
      RowBox[{"range", ",", " ", 
       RowBox[{"Min", "[", "range", "]"}], ",", " ", 
       RowBox[{"Max", "[", "range", "]"}]}], "]"}]}], "]"}]}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"ML", " ", "VALUES"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"reverted", " ", "=", " ", 
   RowBox[{"revertRescale", " ", "@", " ", 
    RowBox[{"revertRescale", "[", 
     RowBox[{"rescaled", ",", " ", 
      RowBox[{"Min", "[", "range", "]"}], ",", " ", 
      RowBox[{"Max", "[", "range", "]"}]}], "]"}]}]}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"what", " ", "you", " ", "store", " ", "in", " ", "values"}], " ", 
   "*)"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"MLValues", " ", "=", " ", 
   RowBox[{"rescale", "[", 
    RowBox[{"reverted", ",", " ", 
     RowBox[{"Min", "[", "reverted", "]"}], ",", " ", 
     RowBox[{"Max", "[", "reverted", "]"}]}], "]"}]}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"ML", " ", "VALUES"}], " ", "*)"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"MLResults", " ", "=", " ", 
   RowBox[{"revertRescale", "[", 
    RowBox[{"MLValues", ",", " ", 
     RowBox[{"Min", "[", "reverted", "]"}], ",", " ", 
     RowBox[{"Max", "[", "reverted", "]"}]}], "]"}]}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Actual", " ", "results"}], " ", "*)"}]}], "\n"}], "Code",
 CellChangeTimes->{{3.739977042590859*^9, 3.739977097212599*^9}, {
   3.7399771822823753`*^9, 3.739977182734867*^9}, {3.739977214727607*^9, 
   3.739977359083639*^9}, {3.7399773931832952`*^9, 3.73997748360783*^9}, {
   3.7399775341005173`*^9, 3.739977644758669*^9}, {3.739977676722829*^9, 
   3.739977812083439*^9}, {3.739977845339617*^9, 3.739977971300939*^9}, {
   3.7399780112460613`*^9, 3.7399781853880997`*^9}, {3.7399782932328444`*^9, 
   3.739978306060728*^9}, {3.7399783490208178`*^9, 3.739978447244165*^9}, 
   3.7399786117655993`*^9},ExpressionUUID->"d800ec84-0dc8-47ee-815c-\
81cd07dc295e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"zoomLevel", " ", "=", " ", 
   RowBox[{"getZoomLevel", " ", "/@", " ", "trainingDataOfCities"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"geoRange", " ", "=", " ", 
   RowBox[{"Map", "[", 
    RowBox[{"getGeoRange", ",", "zoomLevel"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.739291825494463*^9, 3.739291831753286*^9}, 
   3.739450784619001*^9, {3.739451220384659*^9, 3.7394512205798264`*^9}, {
   3.7394648637612886`*^9, 3.739464864940675*^9}, {3.7394667089870033`*^9, 
   3.739466748308125*^9}, {3.739478666392905*^9, 3.739478666515635*^9}, {
   3.7394816418154697`*^9, 3.7394816526357718`*^9}, {3.739483659986652*^9, 
   3.739483660201024*^9}, {3.7394839477754087`*^9, 3.7394839507574787`*^9}, {
   3.739484169137102*^9, 3.739484171545306*^9}, {3.7394842316168547`*^9, 
   3.739484231892894*^9}, {3.739485171666231*^9, 3.739485173149395*^9}, {
   3.739493063806676*^9, 3.739493065105945*^9}, {3.739725383353652*^9, 
   3.739725383986417*^9}, {3.73972649804601*^9, 3.739726498766591*^9}, {
   3.739726809906088*^9, 3.739726811134357*^9}, {3.739733921874542*^9, 
   3.739733922459831*^9}, {3.739879887028779*^9, 3.739879901156109*^9}, {
   3.7398799723882523`*^9, 3.73987997394454*^9}, {3.739880032710518*^9, 
   3.739880036082651*^9}, 3.739880226127932*^9, {3.7398804242230253`*^9, 
   3.739880425412753*^9}, {3.739894485512288*^9, 3.7398945363742857`*^9}, {
   3.739896037957478*^9, 3.7398960580327473`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"bc1a30f6-fb29-427d-8765-418a35a6504f"],

Cell["Check the distribution of points and zoom level:", "CodeText",
 CellChangeTimes->{{3.7392918800593987`*^9, 
  3.7392918889218407`*^9}},ExpressionUUID->"82cff098-1e9b-4ea7-96d4-\
f49811c01086"],

Cell[BoxData[{
 RowBox[{"Histogram", "[", 
  RowBox[{"zoomLevel", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Histogram", "[", 
  RowBox[{"geoRange", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Max", "[", "geoRange", "]"}], "\[IndentingNewLine]", 
 RowBox[{"GeoGraphics", "[", "\n", "    ", 
  RowBox[{
   TemplateBox[{"\"United States\"",RowBox[{"Entity", "[", 
       RowBox[{"\"Country\"", ",", "\"UnitedStates\""}], "]"}],
     "\"Entity[\\\"Country\\\", \\\"UnitedStates\\\"]\"","\"country\""},
    "Entity"], ",", "\n", "    ", 
   RowBox[{
   "GeoServer", " ", "->", " ", 
    "\"\<https://api.mapbox.com/v4/mapbox.satellite/``/``/``.png32?access_\
token=pk.eyJ1IjoicmljY2FyZG9kaXZpcmdpbGlvIiwiYSI6ImNqajhtdHhjNjJkYWozcG9oaHhxa\
3dzOHQifQ.msWbRUe-nqmNC-DZyl40Ew\>\""}], ",", "\n", "    ", 
   RowBox[{"GeoRange", " ", "->", " ", 
    RowBox[{"Quantity", "[", 
     RowBox[{
      RowBox[{"Max", "[", "geoRange", "]"}], ",", "\"\<Miles\>\""}], 
     "]"}]}]}], "\n", "]"}], "\n", 
 RowBox[{"minGeoRange", " ", "=", 
  RowBox[{"Min", "[", "geoRange", "]"}]}], "\n", 
 RowBox[{"GeoGraphics", "[", "\n", "    ", 
  RowBox[{
   TemplateBox[{"\"New York City\"",RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
             "\"UnitedStates\""}], "}"}]}], "]"}],
     "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
    "Entity"], ",", "\n", "    ", 
   RowBox[{
   "GeoServer", " ", "->", " ", 
    "\"\<https://api.mapbox.com/v4/mapbox.satellite/``/``/``.png32?access_\
token=pk.eyJ1IjoicmljY2FyZG9kaXZpcmdpbGlvIiwiYSI6ImNqajhtdHhjNjJkYWozcG9oaHhxa\
3dzOHQifQ.msWbRUe-nqmNC-DZyl40Ew\>\""}], ",", "\n", "    ", 
   RowBox[{"GeoRange", " ", "->", " ", 
    RowBox[{"Quantity", "[", 
     RowBox[{"minGeoRange", ",", "\"\<Miles\>\""}], "]"}]}]}], "\n", 
  "]"}]}], "Code",
 CellChangeTimes->{{3.7392919018179693`*^9, 3.739291958336545*^9}, {
   3.739292121657709*^9, 3.73929215498311*^9}, 3.739292194662038*^9, {
   3.739292877493685*^9, 3.739292910103529*^9}, {3.73929299388838*^9, 
   3.73929300926264*^9}, {3.7394458357832193`*^9, 3.739445848980576*^9}, {
   3.739445883110355*^9, 3.7394458953936663`*^9}, {3.739445975208274*^9, 
   3.739445975361104*^9}, {3.739478783208529*^9, 3.739478849947756*^9}, {
   3.7394788851110764`*^9, 3.739478894969944*^9}, {3.739479124634819*^9, 
   3.739479126157543*^9}, {3.7394809087699413`*^9, 3.739480948434189*^9}, {
   3.739481065011764*^9, 3.739481078730378*^9}, {3.739493185853815*^9, 
   3.739493206224824*^9}, {3.739493260301606*^9, 3.739493274865795*^9}, {
   3.739493535105111*^9, 3.739493535315115*^9}, {3.739493999316908*^9, 
   3.7394940826088657`*^9}, {3.739494112861425*^9, 3.739494113388529*^9}, {
   3.73949417868449*^9, 3.739494189071076*^9}, {3.739494234067933*^9, 
   3.739494237021731*^9}, {3.739783966426999*^9, 3.739783982053081*^9}, {
   3.739809374162752*^9, 3.739809448577532*^9}, {3.7398960898890553`*^9, 
   3.7398961152897863`*^9}, {3.739896224506325*^9, 3.7398962248724194`*^9}, {
   3.7398965214930477`*^9, 3.7398965302991333`*^9}, {3.739896742326936*^9, 
   3.739896742559168*^9}, {3.739896872345408*^9, 3.739896912375971*^9}, {
   3.739897598791128*^9, 3.739897622286477*^9}, {3.739897654345604*^9, 
   3.739897672516573*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"5fce33a1-1021-4d3d-8485-479547660791"],

Cell["\<\
Create a function to return a association of points and zoom level:\
\>", "CodeText",
 CellChangeTimes->{{3.7392920290046062`*^9, 
  3.739292064807222*^9}},ExpressionUUID->"7239a3fa-7e8e-4f7d-866a-\
449f2cbce6b8"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"associateThePositionsWithGeoRange", "[", "points_List", "]"}], 
    " ", ":=", " ", "\[IndentingNewLine]", "\t", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Point\>\"", "\[Rule]", "#"}], ",", 
         RowBox[{"\"\<Zoom\>\"", "\[Rule]", 
          RowBox[{"getZoomLevel", "[", "#", "]"}]}]}], "|>"}], "&"}], ",", 
      "points"}], "]"}]}], ";"}], "*)"}]], "Code",
 CellChangeTimes->{
  3.7392922312313013`*^9, {3.7394668939548693`*^9, 3.7394669160564337`*^9}, {
   3.7394680301053953`*^9, 3.739468055589905*^9}, 3.739928862706962*^9, 
   3.739941295236762*^9},ExpressionUUID->"9f4d1e6b-82a9-4913-a2ba-\
bbafd0ff2fed"],

Cell["Call the createTheDataSet function:", "CodeText",
 CellChangeTimes->{{3.739292075090303*^9, 
  3.7392920868513823`*^9}},ExpressionUUID->"9ff6564b-5c79-4acc-8b4f-\
41e821cef504"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sets", " ", "=", " ", 
   RowBox[{"<|", "\n", "\t", 
    RowBox[{
     RowBox[{"\"\<training\>\"", "   ", "\[Rule]", " ", 
      RowBox[{"associateThePositionsWithGeoRange", "[", 
       RowBox[{"RandomSample", " ", "@", " ", "trainingDataOfCities"}], 
       "]"}]}], ",", "\n", "\t", 
     RowBox[{"\"\<testing\>\"", "    ", "\[Rule]", " ", 
      RowBox[{"associateThePositionsWithGeoRange", "[", 
       RowBox[{"RandomSample", " ", "@", " ", "testingDataOfCities"}], 
       "]"}]}], ",", "\n", "\t", 
     RowBox[{"\"\<validation\>\"", " ", "\[Rule]", " ", 
      RowBox[{"associateThePositionsWithGeoRange", "[", 
       RowBox[{"RandomSample", " ", "@", " ", "validationDataOfCities"}], 
       "]"}]}]}], "\n", "|>"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.739292630274317*^9, 3.739292655182761*^9}, 
   3.739466914936296*^9, {3.739725848836873*^9, 3.739725875900535*^9}, {
   3.7397339713612967`*^9, 3.7397339760972652`*^9}, {3.739828727100963*^9, 
   3.739828736579844*^9}, {3.739880576067809*^9, 3.739880585224852*^9}, {
   3.7398806158058*^9, 3.739880679881844*^9}, {3.739880714339323*^9, 
   3.739880716505604*^9}, {3.739898562495414*^9, 3.739898567883686*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"a42fbfa5-bcd2-42d9-a5e0-03d65778d6ca"],

Cell["\<\
Let\[CloseCurlyQuote]s now write our function that will encode and decode \
name of the images:\
\>", "CodeText",
 CellChangeTimes->{{3.739288500494555*^9, 
  3.739288530591588*^9}},ExpressionUUID->"a50cd165-655d-4d47-af0b-\
17bcd8134cea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"encodeID", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"StringReplace", "[", 
   RowBox[{
    RowBox[{"Developer`EncodeBase64", "@", 
     RowBox[{"BinarySerialize", "@", "expr"}]}], ",", 
    RowBox[{"\"\</\>\"", "\[Rule]", "\"\<~\>\""}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"decodeID", "[", "expr_", "]"}], " ", ":=", " ", 
  RowBox[{"BinaryDeserialize", "@", 
   RowBox[{"Developer`DecodeBase64ToByteArray", "@", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"expr", ",", 
      RowBox[{"\"\<~\>\"", "\[Rule]", "\"\</\>\""}]}], "]"}]}]}]}]}], "Code",
 CellChangeTimes->{
  3.739288613874835*^9, {3.73988072644346*^9, 3.739880729247127*^9}, 
   3.739885513924028*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"748e53f0-884a-424e-910a-2f234b61ef52"],

Cell["Try out the encodeID and decodeID: ", "CodeText",
 CellChangeTimes->{{3.739293026929965*^9, 
  3.739293038211898*^9}},ExpressionUUID->"45e77874-c5bf-4e4c-ae28-\
188c83e6bbf5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Part", "[", 
  RowBox[{"assocoatedtrainingData", ",", "2"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"encodeID", "[", 
  RowBox[{"Part", "[", 
   RowBox[{"assocoatedtrainingData", ",", "2"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"decodeID", "[", "%", "]"}]}], "Input",
 CellChangeTimes->{{3.739451762740291*^9, 3.739451770890506*^9}, {
  3.739451820865142*^9, 3.739451845174436*^9}, {3.7397258983309717`*^9, 
  3.739725899940702*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"ac1c5322-8a62-4e34-b10a-7d0b570ddfd9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Point\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"40.58499622098927`", ",", 
      RowBox[{"-", "74.13441695299083`"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Zoom\"\>", "\[Rule]", "0.`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.739451771117959*^9, {3.7394518225503073`*^9, 3.739451845444305*^9}, 
   3.7394669245242443`*^9, {3.739466973895524*^9, 3.739466974995496*^9}, 
   3.739468070564568*^9, 3.739478690634439*^9, 3.739479157134426*^9, 
   3.739484435483831*^9, 3.7394942770545464`*^9, 3.739725900818038*^9, 
   3.7397268381545143`*^9, 3.7397339834290667`*^9, 3.739784006942915*^9, 
   3.739784621517128*^9, 3.739809734566688*^9, 3.739811596955171*^9, 
   3.739811842791671*^9, 3.7398143182337427`*^9, 3.7398169187321863`*^9, {
   3.7398287472746153`*^9, 3.739828757624405*^9}},
 CellLabel->"Out[35]=",ExpressionUUID->"f10208e3-3eb2-40aa-a989-3e8eeb67a2c7"],

Cell[BoxData["\<\"ODpBAi1TBVBvaW50wSMBAly3+\
ifhSkRA6UeQSZqIUsAtUwRab29tcgAAAAAAAAAA\"\>"], "Output",
 CellChangeTimes->{
  3.739451771117959*^9, {3.7394518225503073`*^9, 3.739451845444305*^9}, 
   3.7394669245242443`*^9, {3.739466973895524*^9, 3.739466974995496*^9}, 
   3.739468070564568*^9, 3.739478690634439*^9, 3.739479157134426*^9, 
   3.739484435483831*^9, 3.7394942770545464`*^9, 3.739725900818038*^9, 
   3.7397268381545143`*^9, 3.7397339834290667`*^9, 3.739784006942915*^9, 
   3.739784621517128*^9, 3.739809734566688*^9, 3.739811596955171*^9, 
   3.739811842791671*^9, 3.7398143182337427`*^9, 3.7398169187321863`*^9, {
   3.7398287472746153`*^9, 3.739828757638629*^9}},
 CellLabel->"Out[36]=",ExpressionUUID->"1526ee9e-42c8-494c-a67c-282590c5af63"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Point\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"40.58499622098927`", ",", 
      RowBox[{"-", "74.13441695299083`"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Zoom\"\>", "\[Rule]", "0.`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.739451771117959*^9, {3.7394518225503073`*^9, 3.739451845444305*^9}, 
   3.7394669245242443`*^9, {3.739466973895524*^9, 3.739466974995496*^9}, 
   3.739468070564568*^9, 3.739478690634439*^9, 3.739479157134426*^9, 
   3.739484435483831*^9, 3.7394942770545464`*^9, 3.739725900818038*^9, 
   3.7397268381545143`*^9, 3.7397339834290667`*^9, 3.739784006942915*^9, 
   3.739784621517128*^9, 3.739809734566688*^9, 3.739811596955171*^9, 
   3.739811842791671*^9, 3.7398143182337427`*^9, 3.7398169187321863`*^9, {
   3.7398287472746153`*^9, 3.7398287576463757`*^9}},
 CellLabel->"Out[37]=",ExpressionUUID->"2e82e3ab-104a-41ec-9fb1-f4eaf3676fdf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
So, far we have created all the needed functions. Now, we will create our new \
function that takes all the function and creates folder for a image with \
association name which was encoded. Then, we will part our image into sub \
images and store them into the folder we created. This will continue for \
every image we get using GeoImage.\
\>", "Subsection",
 CellChangeTimes->{{3.739447492943597*^9, 
  3.7394476681510763`*^9}},ExpressionUUID->"831f9456-a7b3-4e0a-9d40-\
289d00e5a43c"],

Cell["Create a function to getImages from GeoImage:", "CodeText",ExpressionUUID->"8d3f76fc-7216-445b-9de9-29f45a9ee15f"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "getImage", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getImage", "[", 
    RowBox[{"coords_List", ",", " ", "range_", ",", "max_"}], "]"}], " ", ":=",
    " ", "\n", "\t", 
   RowBox[{"GeoGraphics", "[", "\n", "        ", 
    RowBox[{
     RowBox[{"GeoPosition", "[", "coords", "]"}], ",", "\n", "        ", 
     RowBox[{
     "GeoServer", " ", "->", " ", 
      "\"\<https://api.mapbox.com/v4/mapbox.satellite/``/``/``.png32?access_\
token=pk.eyJ1IjoicmljY2FyZG9kaXZpcmdpbGlvIiwiYSI6ImNqajhtdHhjNjJkYWozcG9oaHhxa\
3dzOHQifQ.msWbRUe-nqmNC-DZyl40Ew\>\""}], ",", "\n", "        ", 
     RowBox[{"GeoRange", " ", "->", " ", 
      RowBox[{"Quantity", "[", 
       RowBox[{
        RowBox[{"getGeoRange", "[", 
         RowBox[{"range", ",", "max"}], "]"}], ",", " ", "\"\<Miles\>\""}], 
       "]"}]}], ",", "\n", "        ", 
     RowBox[{"ImageSize", " ", "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{"800", ",", "800"}], "}"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{
  3.739451005086795*^9, {3.739809826120627*^9, 3.739809871887929*^9}, {
   3.739810264254697*^9, 3.739810267172497*^9}, {3.739810310613419*^9, 
   3.739810332776125*^9}, {3.7398112425617*^9, 3.7398112553493433`*^9}, {
   3.739880752425942*^9, 3.7398807810782633`*^9}, {3.7398816972737637`*^9, 
   3.739881705140451*^9}, 3.739897727314822*^9, {3.739931732421317*^9, 
   3.739931737535069*^9}, {3.739932052802495*^9, 3.739932054237487*^9}, {
   3.739932330029936*^9, 3.739932336763826*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"d24208c3-4ada-4567-b28c-7f512f4ad8f2"],

Cell["Now, let\[CloseCurlyQuote]s create our storeImage function:", "CodeText",ExpressionUUID->"4c349f46-896d-442f-91c9-506e721dae41"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "imageLocation", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"imageLocation", "[", 
    RowBox[{"root_", ",", " ", "zoomLevel_", ",", " ", "imageNumber_"}], 
    "]"}], " ", ":=", " ", "\n", "\t", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"root", ",", " ", 
      RowBox[{
       RowBox[{"encodeID", "[", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Zoom\>\"", " ", "\[Rule]", " ", "zoomLevel"}], ",", 
          " ", 
          RowBox[{"\"\<Number\>\"", " ", "\[Rule]", " ", "imageNumber"}]}], 
         "|>"}], "]"}], " ", "<>", " ", "\"\<.png\>\""}]}], "}"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.739447216118417*^9, 3.739447266700036*^9}, {
   3.739452050441359*^9, 3.739452088397271*^9}, {3.7394521318503*^9, 
   3.739452143353545*^9}, {3.7394782978028307`*^9, 3.739478305994787*^9}, {
   3.739478599511551*^9, 3.739478612780447*^9}, 3.7394813670791616`*^9, {
   3.739481444205019*^9, 3.7394814500237083`*^9}, {3.739880805176597*^9, 
   3.73988081730092*^9}, {3.7398808903782043`*^9, 3.739880909031189*^9}, {
   3.739880989776163*^9, 3.739881003172227*^9}, {3.73988103426991*^9, 
   3.7398810361851*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"992a878a-ece8-4621-9f25-b9bb3ea4aaea"],

Cell["Create a function to get folder location with encoded name:", "CodeText",
 CellChangeTimes->{{3.739462716747381*^9, 
  3.7394627356389647`*^9}},ExpressionUUID->"b3405eda-1496-44dc-add9-\
30c3ede8f5f4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "folderLocation", "]"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"folderLocation", "[", 
     RowBox[{"exp_", ",", " ", "trainingOrTestingFolder_"}], "]"}], " ", ":=",
     " ", "\n", "\t", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", 
       "\"\<RoundedCityImages\>\"", ",", "trainingOrTestingFolder", ",", 
       RowBox[{"encodeID", "[", "exp", "]"}]}], "}"}], "]"}]}], ";"}], 
  " "}]}], "Code",
 CellChangeTimes->{{3.7394477786402893`*^9, 3.739447901077332*^9}, {
   3.739447936160303*^9, 3.739447941423914*^9}, 3.739448420674364*^9, {
   3.739462466799013*^9, 3.739462470822237*^9}, {3.739462737424119*^9, 
   3.739462738819079*^9}, {3.7394670242368727`*^9, 3.739467026465727*^9}, {
   3.7394670932963247`*^9, 3.739467114214493*^9}, 3.739467160852457*^9, {
   3.739574184038179*^9, 3.739574201644327*^9}, 3.7398809153445044`*^9, {
   3.7398810112305927`*^9, 3.739881012323408*^9}, 3.7398810424032507`*^9, 
   3.739896959481143*^9, {3.7399319589654427`*^9, 3.7399319617253637`*^9}, 
   3.739940425688525*^9},
 CellLabel->"In[20]:=",ExpressionUUID->"34d04065-ea6f-44ec-b2ed-21d5be51a442"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"encodeID", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{"a", "->", "1"}], "|>"}], "->", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.739932086206235*^9, 3.739932151009212*^9}},
 CellLabel->
  "In[2940]:=",ExpressionUUID->"b74ff110-abd4-41e1-9231-aa3430645b40"],

Cell[BoxData["\<\"ODpmAnMEUnVsZUEBLXMIR2xvYmFsYGFDAUMB\"\>"], "Output",
 CellChangeTimes->{{3.739932095194768*^9, 3.739932156290545*^9}},
 CellLabel->
  "Out[2940]=",ExpressionUUID->"a2c88a45-6ad0-4523-94ed-a86a3598fdd6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decodeID", "[", "%", "]"}]], "Input",
 CellChangeTimes->{{3.7399320983948727`*^9, 3.739932101922925*^9}},
 CellLabel->
  "In[2941]:=",ExpressionUUID->"c0301697-754e-45b9-9554-ce2f37352e40"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"a", "\[Rule]", "1"}], "\[RightAssociation]"}], "\[Rule]", 
  "1"}]], "Output",
 CellChangeTimes->{{3.739932102227895*^9, 3.7399321577262278`*^9}},
 CellLabel->
  "Out[2941]=",ExpressionUUID->"9d5450a4-571b-4675-b851-0ccbededbb14"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Okey now it is time to create our function to partition images into smaller \
parts.\
\>", "Subsection",
 CellChangeTimes->{{3.739463460865419*^9, 
  3.739463486766983*^9}},ExpressionUUID->"00f8d736-527f-4bf6-b662-\
db5f231785ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"When", " ", "images", " ", "were", " ", "parted"}], ",", " ", 
    RowBox[{"their", " ", "zoom", " ", "level", " ", 
     RowBox[{"changed", ".", " ", "To"}], " ", "prevent", " ", "that"}], ",", 
    " ", 
    RowBox[{
    "I", " ", "also", " ", "converted", " ", "the", " ", "zoom", " ", "leve", 
     " ", "for", " ", "each", " ", "image", " ", "by", " ", "simply", " ", 
     "dividing", " ", "the", " ", "real", " ", "zoom", " ", "level", " ", 
     "with", " ", "the", " ", "number", " ", "of", " ", 
     RowBox[{"images", "!"}]}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{"partitionTheImage", ",", " ", "saveImages"}], "]"}], "\n", "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"partitionTheImage", "[", 
      RowBox[{"img_", ",", " ", "zoomLevel_", ",", " ", 
       RowBox[{"levelOfPartition_:", "3"}]}], "]"}], " ", ":=", " ", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"Table", "[", "\n", "\t\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"zoomLevel", " ", "/", " ", "n"}], ",", " ", 
         RowBox[{"Flatten", " ", "@", " ", 
          RowBox[{"ImagePartition", "[", 
           RowBox[{"img", ",", " ", 
            RowBox[{"Scaled", "[", 
             RowBox[{"1", "/", "n"}], "]"}]}], "]"}]}]}], "}"}], ",", "\n", 
       "\t\t", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "1", ",", " ", "levelOfPartition"}], "}"}]}], 
      "\n", "\t", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"saveImages", "[", 
     RowBox[{"folderName_", ",", " ", "partedImage_"}], "]"}], " ", ":=", " ",
     "\n", "\t", 
    RowBox[{"With", "[", "\n", "\t\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"key", " ", "=", " ", 
         RowBox[{"First", "[", "partedImage", "]"}]}], ",", " ", 
        RowBox[{"values", " ", "=", " ", 
         RowBox[{"Flatten", " ", "@", " ", 
          RowBox[{"Last", "[", "partedImage", "]"}]}]}]}], "}"}], ",", "\n", 
      "\t\t", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", "\t\t\t", 
       RowBox[{
        RowBox[{"Export", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{"imageLocation", "[", 
           RowBox[{"folderName", ",", " ", "key", ",", " ", "count"}], "]"}], 
          ",", " ", "\n", "\t\t\t\t", 
          RowBox[{"ImageResize", "[", 
           RowBox[{
            RowBox[{"Part", "[", 
             RowBox[{"values", ",", " ", "count"}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"256", ",", "256"}], "}"}]}], "]"}]}], "\n", "\t\t\t", 
         "]"}], ",", "\n", "\t\t\t", 
        RowBox[{"{", 
         RowBox[{"count", ",", " ", "1", ",", " ", 
          RowBox[{"Length", " ", "@", " ", 
           RowBox[{"Flatten", " ", "@", " ", 
            RowBox[{"Last", "[", "partedImage", "]"}]}]}]}], "}"}]}], "\n", 
       "\t\t", "]"}]}], "\[IndentingNewLine]", "\t", "]"}]}]}]}]], "Code",
 CellChangeTimes->{{3.7394666169579906`*^9, 3.7394666433835783`*^9}, {
   3.739466757667954*^9, 3.739466859153536*^9}, {3.7394720800684223`*^9, 
   3.7394720997054043`*^9}, {3.739475631283024*^9, 3.7394756645550213`*^9}, {
   3.739475696818635*^9, 3.739475698683092*^9}, {3.739475812087162*^9, 
   3.7394758891988077`*^9}, {3.73947611052794*^9, 3.739476124820088*^9}, {
   3.739476490656246*^9, 3.7394765603329487`*^9}, {3.73947659528407*^9, 
   3.739476632361024*^9}, {3.739476683401979*^9, 3.739476784858365*^9}, {
   3.739476816944461*^9, 3.739476862380303*^9}, {3.739476975393155*^9, 
   3.739477018787198*^9}, {3.73947710168124*^9, 3.739477120263041*^9}, {
   3.739477165455797*^9, 3.739477241150093*^9}, {3.739477298600993*^9, 
   3.7394773583654747`*^9}, {3.739477392972145*^9, 3.739477393479424*^9}, {
   3.739477629181438*^9, 3.739477629476819*^9}, {3.73947783698877*^9, 
   3.739477849993491*^9}, {3.739477893039838*^9, 3.739477986543713*^9}, {
   3.739478017903351*^9, 3.739478213819571*^9}, 3.7394785305084543`*^9, {
   3.739480787275353*^9, 3.7394808970018167`*^9}, {3.739481113619956*^9, 
   3.739481148829143*^9}, {3.739726194092959*^9, 3.739726195480517*^9}, {
   3.7397840190764227`*^9, 3.739784021895563*^9}, {3.739810875122912*^9, 
   3.739810876176947*^9}, 3.739811085017045*^9, {3.739881064297174*^9, 
   3.7398811488294773`*^9}, {3.7398812480053453`*^9, 3.739881254546925*^9}, {
   3.739881811187099*^9, 3.739881876484268*^9}, {3.7398819339094553`*^9, 
   3.7398819390361357`*^9}, {3.739882063893731*^9, 3.739882086477154*^9}, {
   3.739882123566204*^9, 3.739882227110114*^9}, {3.73988226617979*^9, 
   3.739882281256263*^9}, 3.739882317627418*^9, {3.739882382034811*^9, 
   3.739882461723727*^9}, {3.739932059602292*^9, 3.7399320597897987`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"b545a918-adfa-43f8-980f-ed3a0b8ac2cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Time has come, Lets add all the functions:", "Subsection",
 CellChangeTimes->{{3.739466869521853*^9, 
  3.739466880913457*^9}},ExpressionUUID->"05a23029-b3d3-42f8-9e1a-\
a6762aee3e6c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "createTheDataSet", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"createTheDataSet", "[", 
   RowBox[{"data_List", ",", " ", "rest___"}], "]"}], " ", ":=", " ", 
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"createTheDataSet", "[", 
      RowBox[{"#", ",", " ", "rest"}], "]"}], " ", "&"}], ",", " ", "data"}], 
   "]"}]}], "\n", 
 RowBox[{
  RowBox[{"createTheDataSet", "[", 
   RowBox[{
   "assoPointAndGeoRange_Association", ",", " ", 
    "trainingOrTestingFolder_String", ",", " ", "rest___"}], "]"}], " ", ":=",
   " ", "\[IndentingNewLine]", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"folderName", ",", " ", "img", ",", " ", "imglocation"}], "}"}], 
    ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"folderName", " ", "=", " ", 
      RowBox[{"folderLocation", "[", 
       RowBox[{
        RowBox[{"assoPointAndGeoRange", "\[Rule]", "10"}], ",", " ", 
        "trainingOrTestingFolder"}], "]"}]}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"Not", " ", "@", " ", 
        RowBox[{"FileExistsQ", " ", "@", " ", "folderName"}]}], ",", " ", 
       "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"Quiet", " ", "@", " ", 
         RowBox[{"CreateDirectory", " ", "@", " ", "folderName"}]}], ";", 
        "\n", "\t\t\t", 
        RowBox[{"img", " ", "=", " ", 
         RowBox[{"Image", " ", "@", " ", 
          RowBox[{"getImage", "[", "\n", "\t\t\t\t", 
           RowBox[{
            RowBox[{"assoPointAndGeoRange", "[", "\"\<Point\>\"", "]"}], ",", 
            " ", "\n", "\t\t\t\t", 
            RowBox[{"assoPointAndGeoRange", "[", "\"\<Zoom\>\"", "]"}], ",", 
            "\n", "\t\t\t\t", "10"}], "\n", "\t\t\t", "]"}]}]}], ";", "\n", 
        "\t\t\t", 
        RowBox[{"If", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{"ImageQ", " ", "@", " ", "img"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"Export", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"imageLocation", "[", 
             RowBox[{"folderName", ",", " ", 
              RowBox[{"assoPointAndGeoRange", "[", "\"\<Zoom\>\"", "]"}], ",",
               " ", "10"}], "]"}], ",", " ", "\n", "\t\t\t\t\t", 
            RowBox[{"ImageResize", "[", 
             RowBox[{"img", ",", " ", 
              RowBox[{"{", 
               RowBox[{"256", ",", "256"}], "}"}]}], "]"}]}], "\n", 
           "\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", 
         RowBox[{"(*", 
          RowBox[{"Scan", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{"saveImages", "[", 
              RowBox[{"folderName", ",", " ", "#"}], "]"}], " ", "&"}], ",", 
            "\n", "\t\t\t\t\t", 
            RowBox[{"partitionTheImage", "[", 
             RowBox[{"img", ",", " ", 
              RowBox[{"assoPointAndGeoRange", "[", "\"\<Zoom\>\"", "]"}], ",",
               " ", "rest"}], "]"}]}], "\n", "\t\t\t\t", "]"}], "*)"}], "\n", 
         "\t\t\t", "]"}]}]}], "\n", "\t\t", "]"}]}]}], "\[IndentingNewLine]", 
   "\t", "]"}]}], "\[IndentingNewLine]"}], "Code",
 CellChangeTimes->{{3.739467347631217*^9, 3.739467400121348*^9}, {
   3.739468362575338*^9, 3.7394684389765177`*^9}, {3.739468480493491*^9, 
   3.739468612557733*^9}, {3.7394686751556673`*^9, 3.739468675783675*^9}, {
   3.7394687214068737`*^9, 3.73946876039183*^9}, {3.7394688607331448`*^9, 
   3.739468861977964*^9}, {3.739469069594213*^9, 3.739469073283037*^9}, {
   3.7394691281313477`*^9, 3.739469203421577*^9}, {3.739469313956441*^9, 
   3.739469429987874*^9}, {3.739469518279748*^9, 3.7394695348908463`*^9}, {
   3.739469574609304*^9, 3.739469618965536*^9}, {3.739469897267374*^9, 
   3.73946990979012*^9}, {3.7394700514017477`*^9, 3.7394700607710733`*^9}, {
   3.739470300200817*^9, 3.739470303706621*^9}, {3.739470354833145*^9, 
   3.73947037019112*^9}, {3.739470427579221*^9, 3.739470428183654*^9}, 
   3.7394704647412043`*^9, 3.73947050312679*^9, {3.7394708118847227`*^9, 
   3.7394708138122797`*^9}, 3.739471433622591*^9, {3.739471477735765*^9, 
   3.739471482846342*^9}, {3.739471565117153*^9, 3.739471580496258*^9}, {
   3.739471766341708*^9, 3.739471769938924*^9}, {3.739471817642435*^9, 
   3.739471879264933*^9}, {3.7394719227283363`*^9, 3.739471995415757*^9}, {
   3.739472115690226*^9, 3.739472119867248*^9}, {3.739475677702608*^9, 
   3.7394756869491053`*^9}, {3.739476527827445*^9, 3.739476527976363*^9}, {
   3.739478502868257*^9, 3.739478506899797*^9}, {3.739478710627852*^9, 
   3.7394787111606903`*^9}, 3.739480191505872*^9, {3.739545531436269*^9, 
   3.739545593312727*^9}, {3.739726579530631*^9, 3.739726587759081*^9}, 
   3.7397268868003073`*^9, {3.739784190732204*^9, 3.739784263363302*^9}, {
   3.7398099276422977`*^9, 3.7398099343915997`*^9}, {3.7398106258652782`*^9, 
   3.739810626845846*^9}, {3.739810689489172*^9, 3.739810716927815*^9}, {
   3.73981089806651*^9, 3.7398108994561663`*^9}, {3.739811067825844*^9, 
   3.739811179923625*^9}, {3.739811633597741*^9, 3.73981163453881*^9}, {
   3.739814983066636*^9, 3.739815089988367*^9}, {3.739815140783486*^9, 
   3.739815141857728*^9}, {3.739815201747532*^9, 3.739815221593416*^9}, {
   3.739815470193613*^9, 3.739815531908276*^9}, {3.73981557666512*^9, 
   3.7398155811840887`*^9}, {3.739881153793228*^9, 3.739881225395007*^9}, {
   3.739881271114273*^9, 3.7398812752569847`*^9}, {3.739881425294264*^9, 
   3.7398814321398907`*^9}, {3.739881466364806*^9, 3.739881466579623*^9}, {
   3.739881512511742*^9, 3.739881533036059*^9}, {3.7398816423651667`*^9, 
   3.7398816752719307`*^9}, {3.7398817421961184`*^9, 3.739881800082369*^9}, {
   3.739881853200296*^9, 3.7398818608946037`*^9}, {3.739881900664153*^9, 
   3.739881901367979*^9}, {3.739882058568098*^9, 3.739882059125436*^9}, {
   3.739885651515747*^9, 3.739885684007448*^9}, 3.7398977380515757`*^9, {
   3.739931882722578*^9, 3.739931892170452*^9}, 3.739931926035572*^9, {
   3.739932175968031*^9, 3.739932182815257*^9}, {3.739932366255649*^9, 
   3.73993236791741*^9}, 3.739932789475616*^9, {3.739940299330263*^9, 
   3.739940327973653*^9}, {3.739940370299027*^9, 3.739940377477353*^9}, {
   3.739940567828491*^9, 3.7399405837683992`*^9}, {3.7399407309508667`*^9, 
   3.73994073536672*^9}, 3.739941164145047*^9, {3.739941662587987*^9, 
   3.739941667555977*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"45a3f555-28af-4a06-b18a-f941f28f51b8"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"createTheDataSet", "[", 
   RowBox[{
    RowBox[{"sets", "[", "\"\<validation\>\"", "]"}], ",", 
    "\"\<validation\>\""}], "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.739574418567245*^9, 3.739574423350889*^9}, {
   3.7397259318264627`*^9, 3.7397259326382217`*^9}, {3.739726040575419*^9, 
   3.73972607058571*^9}, {3.739726184238943*^9, 3.739726275864451*^9}, {
   3.739726322062097*^9, 3.739726371989555*^9}, 3.739726610906889*^9, {
   3.739726865220351*^9, 3.7397268837879477`*^9}, {3.739727069752077*^9, 
   3.7397270721397448`*^9}, {3.739734004200671*^9, 3.739734018358386*^9}, {
   3.739734070265163*^9, 3.739734071409971*^9}, {3.7397341308565607`*^9, 
   3.7397341498330307`*^9}, 3.7397350333716307`*^9, 3.739735196830658*^9, 
   3.739735270487424*^9, 3.739784027844791*^9, {3.739784069846386*^9, 
   3.739784117858322*^9}, {3.7397841815356083`*^9, 3.73978418328797*^9}, {
   3.73978428219316*^9, 3.739784314575788*^9}, {3.739809765193885*^9, 
   3.739809768234674*^9}, {3.739810639681491*^9, 3.739810641743112*^9}, 
   3.739811353014769*^9, {3.739811686685358*^9, 3.7398117053592*^9}, {
   3.739811861322955*^9, 3.7398118632638493`*^9}, {3.73981554114067*^9, 
   3.7398155506019917`*^9}, {3.739815620102478*^9, 3.739815621370327*^9}, 
   3.739816936976357*^9, {3.739818473135785*^9, 3.739818477315627*^9}, 
   3.739827955453761*^9, {3.739828989638504*^9, 3.739828990115234*^9}, 
   3.739830768119911*^9, {3.739881330877904*^9, 3.739881373885148*^9}, {
   3.739882487629987*^9, 3.739882495013904*^9}, {3.739882608014308*^9, 
   3.739882620480611*^9}, 
   3.73991088135439*^9},ExpressionUUID->"5931a2df-e0a2-47f6-bd9e-\
b486326c4654"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"createTheDataSet", "[", 
   RowBox[{
    RowBox[{"sets", "[", "\"\<training\>\"", "]"}], ",", "\"\<training\>\""}],
    "]"}], "*)"}]], "Input",
 CellChangeTimes->{
  3.7399108797046137`*^9},ExpressionUUID->"fcff796a-0c5b-4cd3-8334-\
bd5e0d135428"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"createTheDataSet", "[", 
   RowBox[{
    RowBox[{"sets", "[", "\"\<testing\>\"", "]"}], ",", "\"\<testing\>\""}], 
   "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.739882624372348*^9, 3.73988262761852*^9}, {
   3.739885538515552*^9, 3.739885541521595*^9}, 
   3.739910878736755*^9},ExpressionUUID->"73d692a5-1d4e-41af-bd23-\
2b4ea5e476c9"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "associateThePositionsWithGeoRange", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"associateThePositionsWithGeoRange", "[", "points_List", "]"}], 
   " ", ":=", " ", "\[IndentingNewLine]", "\t", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Point\>\"", "\[Rule]", "#"}], ",", 
        RowBox[{"\"\<Zoom\>\"", "\[Rule]", 
         RowBox[{"getZoomLevel", "[", "]"}]}]}], "|>"}], "&"}], ",", 
     "points"}], "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{
  3.7392922312313013`*^9, {3.7394668939548693`*^9, 3.7394669160564337`*^9}, {
   3.7394680301053953`*^9, 3.739468055589905*^9}, {3.7399277718492804`*^9, 
   3.7399277881301117`*^9}, {3.739931458247555*^9, 3.73993146139592*^9}, 
   3.7399315203961906`*^9, {3.739932300523178*^9, 3.739932304119793*^9}},
 CellLabel->
  "In[202]:=",ExpressionUUID->"f842f7e0-17d2-466c-806f-c4d644cbd074"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "createDataSet", "]"}], "\n", 
 RowBox[{
  RowBox[{"createDataSet", "[", 
   RowBox[{"entities_", ",", "nPosAndFolder_Association", ",", "maxRange_"}], 
   "]"}], " ", ":=", " ", "\n", "\t", 
  RowBox[{"With", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t", 
     RowBox[{"sets", " ", "=", " ", "\n", "\t\t\t", 
      RowBox[{"<|", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"\"\<training\>\"", "   ", "\[Rule]", " ", 
         RowBox[{"associateThePositionsWithGeoRange", "[", 
          RowBox[{"geoPositionOfCountry", "[", 
           RowBox[{
            RowBox[{"{", "entities", "}"}], ",", 
            RowBox[{"nPosAndFolder", "[", "\"\<training\>\"", "]"}], ",", 
            "\"\<training\>\""}], "]"}], "]"}]}], ",", "\n", "\t\t\t", 
        RowBox[{"\"\<testing\>\"", "    ", "\[Rule]", " ", 
         RowBox[{"associateThePositionsWithGeoRange", "[", 
          RowBox[{"geoPositionOfCountry", "[", 
           RowBox[{
            RowBox[{"{", "entities", "}"}], ",", 
            RowBox[{"nPosAndFolder", "[", "\"\<validation\>\"", "]"}], ",", 
            "\"\<validation\>\""}], "]"}], "]"}]}], ",", "\n", "\t\t\t", 
        RowBox[{"\"\<validation\>\"", " ", "\[Rule]", " ", 
         RowBox[{"associateThePositionsWithGeoRange", "[", 
          RowBox[{"geoPositionOfCountry", "[", 
           RowBox[{
            RowBox[{"{", "entities", "}"}], ",", 
            RowBox[{"nPosAndFolder", "[", "\"\<testing\>\"", "]"}], ",", 
            "\"\<testing\>\""}], "]"}], "]"}]}]}], "\n", "\t\t\t", "|>"}]}], 
     "\n", "\t\t", "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"createTheDataSet", "[", 
      RowBox[{
       RowBox[{"sets", "[", "\"\<validation\>\"", "]"}], ",", 
       "\"\<validation\>\""}], "]"}], ";", "\n", "\t\t", 
     RowBox[{"Print", "[", "\"\<validation done\>\"", "]"}], ";", "\n", 
     "\t\t", 
     RowBox[{"createTheDataSet", "[", 
      RowBox[{
       RowBox[{"sets", "[", "\"\<training\>\"", "]"}], ",", 
       "\"\<training\>\""}], "]"}], ";", "\n", "\t\t", 
     RowBox[{"Print", "[", "\"\<training done\>\"", "]"}], ";", "\n", "\t\t", 
     RowBox[{"createTheDataSet", "[", 
      RowBox[{
       RowBox[{"sets", "[", "\"\<testing\>\"", "]"}], ",", 
       "\"\<testing\>\""}], "]"}]}]}], "\n", "\t", "]"}]}]}], "Code",
 CellChangeTimes->{{3.739913689834401*^9, 3.739913736434849*^9}, {
   3.7399137665960693`*^9, 3.739913768615155*^9}, {3.73991383026369*^9, 
   3.739913916900899*^9}, {3.739913997672803*^9, 3.739914033506798*^9}, {
   3.739914064102047*^9, 3.739914150508772*^9}, {3.7399141864990587`*^9, 
   3.739914202561171*^9}, {3.739927356030105*^9, 3.739927368480522*^9}, {
   3.739927399414054*^9, 3.7399274496293173`*^9}, {3.7399274977789183`*^9, 
   3.739927500600012*^9}, {3.7399276739637003`*^9, 3.739927761925148*^9}, {
   3.739927792582048*^9, 3.739927795992477*^9}, {3.739927883523522*^9, 
   3.739927941069854*^9}, {3.739927999432325*^9, 3.739928014979007*^9}, 
   3.739928199792707*^9, 3.739928914686281*^9, 3.7399289751074133`*^9, {
   3.739930608068178*^9, 3.739930620170837*^9}, {3.739931466658017*^9, 
   3.7399314711882*^9}, {3.739931545166436*^9, 3.739931572545084*^9}, {
   3.7399316667392817`*^9, 3.739931681963134*^9}, {3.739932463538166*^9, 
   3.739932466540722*^9}, 3.739932670434194*^9, {3.7399396912068872`*^9, 
   3.739939696851337*^9}, {3.739939740031403*^9, 3.739939740217922*^9}, {
   3.739940438060165*^9, 3.739940457370451*^9}, {3.739940744415275*^9, 
   3.739940751678059*^9}, {3.7399415850185337`*^9, 3.739941629222967*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"1f02c429-3704-42c1-8e6e-7583b4ddf749"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"createDataSet", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      TemplateBox[{"\"Dallas\"",RowBox[{"Entity", "[", 
          RowBox[{"\"City\"", ",", 
            RowBox[{"{", 
              
              RowBox[{"\"Dallas\"", ",", "\"Texas\"", ",", 
                "\"UnitedStates\""}], "}"}]}], "]"}],
        "\"Entity[\\\"City\\\", {\\\"Dallas\\\", \\\"Texas\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
       "Entity"], ",", 
      TemplateBox[{"\"Chicago\"",RowBox[{"Entity", "[", 
          RowBox[{"\"City\"", ",", 
            RowBox[{"{", 
              
              RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
                "\"UnitedStates\""}], "}"}]}], "]"}],
        "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"","\"city\""},
       "Entity"], ",", 
      NamespaceBox["LinguisticAssistant",
       DynamicModuleBox[{Typeset`query$$ = "Houston", Typeset`boxes$$ = 
        TemplateBox[{"\"Houston\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"Houston\"", ",", "\"Texas\"", ",", "\"UnitedStates\""}], 
                "}"}]}], "]"}], 
          "\"Entity[\\\"City\\\", {\\\"Houston\\\", \\\"Texas\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""}, "Entity"], 
        Typeset`allassumptions$$ = {{
         "type" -> "Clash", "word" -> "Houston", "template" -> 
          "Assuming \"${word}\" is ${desc1}. Use as ${desc2} instead", 
          "count" -> "9", 
          "Values" -> {{
            "name" -> "City", "desc" -> "a city", "input" -> 
             "*C.Houston-_*City-"}, {
            "name" -> "Surname", "desc" -> "a surname", "input" -> 
             "*C.Houston-_*Surname-"}, {
            "name" -> "Person", "desc" -> "a person", "input" -> 
             "*C.Houston-_*Person-"}, {
            "name" -> "NBATeam", "desc" -> "an NBA team", "input" -> 
             "*C.Houston-_*NBATeam-"}, {
            "name" -> "MLBTeam", "desc" -> "an MLB team", "input" -> 
             "*C.Houston-_*MLBTeam-"}, {
            "name" -> "NFLTeam", "desc" -> "an NFL team", "input" -> 
             "*C.Houston-_*NFLTeam-"}, {
            "name" -> "GivenName", "desc" -> "a given name", "input" -> 
             "*C.Houston-_*GivenName-"}, {
            "name" -> "Periodical", "desc" -> "a periodical", "input" -> 
             "*C.Houston-_*Periodical-"}, {
            "name" -> "SolarSystemFeature", "desc" -> 
             "a solar system feature", "input" -> 
             "*C.Houston-_*SolarSystemFeature-"}}}, {
         "type" -> "SubCategory", "word" -> "Houston", "template" -> 
          "Assuming ${desc1}. Use ${desc2} instead", "count" -> "10", 
          "Values" -> {{
            "name" -> "{Houston, Texas, UnitedStates}", "desc" -> 
             "Houston (Texas, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Texas.UnitedStates--"}, {
            "name" -> "{Houston, Mississippi, UnitedStates}", "desc" -> 
             "Houston (Mississippi, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Mississippi.UnitedStates--"}, \
{"name" -> "{Houston, Pennsylvania, UnitedStates}", "desc" -> 
             "Houston (Pennsylvania, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Pennsylvania.UnitedStates--"},\
 {"name" -> "{Houston, Missouri, UnitedStates}", "desc" -> 
             "Houston (Missouri, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Missouri.UnitedStates--"}, {
            "name" -> "{Houston, Delaware, UnitedStates}", "desc" -> 
             "Houston (Delaware, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Delaware.UnitedStates--"}, {
            "name" -> "{Houston, Renfrewshire, UnitedKingdom}", "desc" -> 
             "Houston (United Kingdom)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Renfrewshire.UnitedKingdom--"}\
, {"name" -> "{Houston, Minnesota, UnitedStates}", "desc" -> 
             "Houston (Minnesota, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Minnesota.UnitedStates--"}, {
            "name" -> "{Houston, Alaska, UnitedStates}", "desc" -> 
             "Houston (Alaska, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Alaska.UnitedStates--"}, {
            "name" -> "{Houston, BritishColumbia, Canada}", "desc" -> 
             "Houston (Canada)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.BritishColumbia.Canada--"}, {
            "name" -> "{Houston, Arkansas, UnitedStates}", "desc" -> 
             "Houston (Arkansas, USA)", "input" -> 
             "*DPClash.CityE.Houston-_**Houston.Arkansas.UnitedStates--"}}}}, 
        Typeset`assumptions$$ = {}, Typeset`open$$ = {1, 2}, 
        Typeset`querystate$$ = {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.591971`6.223845425137022, "Messages" -> {}}}, 
        DynamicBox[ToBoxes[
          AlphaIntegration`LinguisticAssistantBoxes["", 4, Automatic, 
           Dynamic[Typeset`query$$], 
           Dynamic[Typeset`boxes$$], 
           Dynamic[Typeset`allassumptions$$], 
           Dynamic[Typeset`assumptions$$], 
           Dynamic[Typeset`open$$], 
           Dynamic[Typeset`querystate$$]], StandardForm],
         ImageSizeCache->{137., {7., 15.}},
         TrackedSymbols:>{
          Typeset`query$$, Typeset`boxes$$, Typeset`allassumptions$$, 
           Typeset`assumptions$$, Typeset`open$$, Typeset`querystate$$}],
        DynamicModuleValues:>{},
        UndoTrackedVariables:>{Typeset`open$$}],
       BaseStyle->{"Deploy"},
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True]}], "}"}], ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<training\>\"", "\[Rule]", "250"}], ",", 
      RowBox[{"\"\<validation\>\"", "\[Rule]", "100"}], ",", 
      RowBox[{"\"\<testing\>\"", "\[Rule]", "60"}]}], "|>"}], ",", "10"}], 
   "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.739927741740478*^9, 3.7399277446913757`*^9}, {
   3.739927807330768*^9, 3.7399278780996923`*^9}, {3.739928007230982*^9, 
   3.7399280075798798`*^9}, {3.7399280431147537`*^9, 
   3.7399280454596157`*^9}, {3.73992818793237*^9, 3.7399281901599617`*^9}, {
   3.739928239261506*^9, 3.739928239466174*^9}, {3.739928895469995*^9, 
   3.7399288997149467`*^9}, {3.73993147940847*^9, 3.739931479617717*^9}, {
   3.739931526954054*^9, 3.73993153648101*^9}, {3.73993194735926*^9, 
   3.739931949630052*^9}, {3.73993247061395*^9, 3.739932500518985*^9}, {
   3.739932634455961*^9, 3.7399326626954737`*^9}, 3.739932772956099*^9, {
   3.7399404661380453`*^9, 3.739940503734968*^9}, {3.739941639266355*^9, 
   3.739941657918075*^9}, {3.7399419136206217`*^9, 3.739941916016852*^9}, {
   3.7399641399114733`*^9, 3.739964145637598*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"cd1e5463-248e-422f-a783-7af119dfdb6d"],

Cell[CellGroupData[{

Cell[BoxData["\<\"validation done\"\>"], "Print",
 CellChangeTimes->{{3.739964136256309*^9, 3.7399641509254713`*^9}},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"d437bbe0-a4d1-4fa7-af09-2a9fe831dc90"],

Cell[BoxData["\<\"training done\"\>"], "Print",
 CellChangeTimes->{{3.739964136256309*^9, 3.739964150937179*^9}},
 CellLabel->
  "During evaluation of \
In[33]:=",ExpressionUUID->"3b905f8d-8098-4509-b812-0a35597e2ce0"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"getFileNames", "[", 
     RowBox[{"rootfolder_", ",", "folderName_"}], "]"}], " ", ":=", " ", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{"FileNames", "[", 
     RowBox[{"\"\<*.png\>\"", ",", 
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NotebookDirectory", "[", "]"}], ",", "rootfolder", ",", 
         "folderName"}], "}"}], "]"}], ",", "Infinity"}], "]"}]}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"fromFileNameGetGeoRange", "[", "fileName_", "]"}], " ", ":=", " ",
    "\[IndentingNewLine]", "\t", 
   RowBox[{
    RowBox[{"decodeID", "[", 
     RowBox[{"FileBaseName", "[", "fileName", "]"}], "]"}], "[", 
    "\"\<Zoom\>\"", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.73994105027351*^9, 3.7399410514846973`*^9}, {
  3.739941366231132*^9, 3.739941368319151*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"149af149-0a04-4576-9ade-beeda42c29e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", " ", "=", " ", 
  RowBox[{
   RowBox[{
    RowBox[{"fromFileNameGetGeoRange", "[", "#", "]"}], "&"}], "/@", 
   RowBox[{"getFileNames", "[", 
    RowBox[{"\"\<RoundedCityImages\>\"", ",", "\"\<validation\>\""}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.739940951562175*^9, 3.739941026101081*^9}, 
   3.7399418656524487`*^9},
 CellLabel->
  "In[268]:=",ExpressionUUID->"f586cb5b-178e-47fe-9757-b9d245610e43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.15081411744976458`", ",", "0.509547838255934`", ",", 
   "0.9311572669893124`", ",", "0.1`", ",", "0.8053644352555429`", ",", 
   "0.7800733020206907`", ",", "0.9854919064371193`", ",", 
   "0.5493044694491391`", ",", "0.6890563158265723`", ",", 
   "0.6285310004908831`", ",", "0.6913000231750241`", ",", 
   "0.6560465657713177`", ",", "0.22556104476362315`", ",", "0.1`", ",", 
   "0.3424917534900618`", ",", "0.17797819349714272`", ",", "0.1`", ",", 
   "0.6394155708032552`", ",", "0.8366475130729254`", ",", 
   "0.47464773151666195`"}], "}"}]], "Output",
 CellChangeTimes->{{3.7399410266009407`*^9, 3.739941053922124*^9}, 
   3.739941198264634*^9, {3.739941363493394*^9, 3.739941371263359*^9}, 
   3.739941866582546*^9},
 CellLabel->
  "Out[268]=",ExpressionUUID->"290c03c5-4219-46a1-98f2-565304adc7f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"getGeoRange", "[", 
      RowBox[{"#", ",", "8"}], "]"}], "&"}], ",", "c"}], "]"}], "//", 
  "Histogram"}]], "Input",
 CellChangeTimes->{{3.739941376745138*^9, 3.739941412860339*^9}, {
  3.739941871398732*^9, 3.7399418729971657`*^9}},
 CellLabel->
  "In[270]:=",ExpressionUUID->"0c9e21dd-76a1-4b6e-855c-48f40d8acefe"],

Cell[BoxData[
 GraphicsBox[{
   {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
    Opacity[0.6579999999999999], Thickness[Small]}], {}, 
    {RGBColor[0.987148, 0.8073604000000001, 0.49470040000000004`], EdgeForm[{
     Opacity[0.6579999999999999], Thickness[Small]}], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{0., 0}, {2., 6.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{15.46577261809448, 
          99.91293034427544}, {-77.22070725049286, 95.60230332938997}}],
        StatusArea[#, 6]& ,
        TagBoxNote->"6"],
       StyleBox["6", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[6, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{2., 0}, {4., 2.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{99.41293034427544, 183.8600880704564}, {
          37.66129980276236, 95.60230332938997}}],
        StatusArea[#, 2]& ,
        TagBoxNote->"2"],
       StyleBox["2", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[2, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{4., 0}, {6., 7.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{183.3600880704564, 
          267.80724579663735`}, {-105.94120901380668`, 95.60230332938997}}],
        StatusArea[#, 7]& ,
        TagBoxNote->"7"],
       StyleBox["7", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[7, {}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       TagBox[
        DynamicBox[{
          FEPrivate`If[
           CurrentValue["MouseOver"], 
           EdgeForm[{
             GrayLevel[0.5], 
             AbsoluteThickness[1.5], 
             Opacity[0.66]}], {}, {}], 
          RectangleBox[{6., 0}, {8., 5.}, "RoundingRadius" -> 0]},
         ImageSizeCache->{{267.30724579663735`, 
          351.75440352281834`}, {-48.500205487179045`, 95.60230332938997}}],
        StatusArea[#, 5]& ,
        TagBoxNote->"5"],
       StyleBox["5", {}, StripOnInput -> False]],
      Annotation[#, 
       Style[5, {}], "Tooltip"]& ]}, {}, {}}, {{}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{-0.16, 0},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{0., 8.}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.73994139471314*^9, 3.739941413336286*^9}, {
  3.739941868549054*^9, 3.739941873411666*^9}},
 CellLabel->
  "Out[270]=",ExpressionUUID->"dc81243b-fb34-485e-98a3-058fec000fc5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Create the Network", "Section",
 CellChangeTimes->{{3.73948216192352*^9, 3.739482171299431*^9}, {
  3.739574492898245*^9, 
  3.739574493509609*^9}},ExpressionUUID->"69c2789e-757d-42de-8e7a-\
aa67a7c35b9d"],

Cell[TextData[StyleBox["In the last section, we collected the satellite \
images using GeoImage and store all those images on our hard drive. In this \
section, we will create our Neural Network so we can feed it with the data we \
have. ",
 FontColor->GrayLevel[0.5]]], "Text",
 CellChangeTimes->{{3.739574452568635*^9, 
  3.739574518511454*^9}},ExpressionUUID->"7de5c4c6-a64b-46a1-a690-\
20421acf8327"],

Cell["Obtain the all the satellite images\[CloseCurlyQuote] file name:", \
"CodeText",
 CellChangeTimes->{{3.739617512346897*^9, 
  3.7396175322899933`*^9}},ExpressionUUID->"397141f2-5191-422a-93be-\
13de607758e9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingFileNames", " ", "=", " ", 
   RowBox[{"FileNames", "[", 
    RowBox[{
    "\"\<*.png\>\"", ",", 
     "\"\</Users/mehmetsahin/Downloads/SatelliteImages/Training\>\"", ",", 
     "Infinity"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testingFileNames", " ", "=", " ", 
   RowBox[{"FileNames", "[", 
    RowBox[{
    "\"\<*.png\>\"", ",", 
     "\"\</Users/mehmetsahin/Downloads/SatelliteImages/Testing\>\"", ",", 
     "Infinity"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"ByteCount", "[", "trainingFileNames", "]"}], "\[IndentingNewLine]", 
 RowBox[{"ByteCount", "[", "testingFileNames", "]"}]}], "Input",
 CellChangeTimes->{{3.7396441047060003`*^9, 3.73964411240676*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"15c30300-e287-4825-9e66-2fa1922b0dcd"],

Cell[BoxData["3155680"], "Output",
 CellChangeTimes->{3.739642124337412*^9, 3.7396435430670977`*^9, 
  3.739644115820108*^9, 3.739655084389327*^9, 3.7396569305283813`*^9, 
  3.7396963812139893`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"0b058348-c50c-4941-a577-f6fad6929fd0"],

Cell[BoxData["312488"], "Output",
 CellChangeTimes->{3.739642124337412*^9, 3.7396435430670977`*^9, 
  3.739644115820108*^9, 3.739655084389327*^9, 3.7396569305283813`*^9, 
  3.739696381224489*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"c99c177e-e454-4703-a338-649e3463bcc1"]
}, Open  ]],

Cell["\<\
Define a function to get geo range (zoom level) from the image\
\[CloseCurlyQuote]s name:\
\>", "CodeText",
 CellChangeTimes->{{3.7396421464655533`*^9, 
  3.7396421896453333`*^9}},ExpressionUUID->"7aa12ef3-26bc-483c-a725-\
6d772e623a7f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"fromFileNameGetGeoRange", "[", "fileName_", "]"}], " ", ":=", " ",
    "\[IndentingNewLine]", "\t", 
   RowBox[{"ToExpression", "@", 
    RowBox[{"First", "@", 
     RowBox[{"StringSplit", "[", 
      RowBox[{
       RowBox[{"decodeID", "[", 
        RowBox[{"FileBaseName", "@", "fileName"}], "]"}], ",", "\"\<-\>\""}], 
      "]"}]}]}]}], ";"}]], "Code",
 CellChangeTimes->{{3.73964219174292*^9, 3.739642197595091*^9}},
 CellLabel->
  "In[132]:=",ExpressionUUID->"255aacb6-794c-4ff6-8454-598bc0609fe5"],

Cell["Obtain the training and testing data files:", "CodeText",
 CellChangeTimes->{{3.739642209962819*^9, 
  3.739642217770356*^9}},ExpressionUUID->"b19a2987-604b-4b47-a42b-\
7b327a644fcd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingDataFiles", " ", "=", " ", 
   RowBox[{"ParallelMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"File", "[", "#", "]"}], "->", 
       RowBox[{"fromFileNameGetGeoRange", "[", "#", "]"}]}], "&"}], ",", 
     "trainingFileNames"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testingDataFiles", " ", "=", " ", 
   RowBox[{"ParallelMap", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"File", "[", "#", "]"}], "->", 
       RowBox[{"fromFileNameGetGeoRange", "[", "#", "]"}]}], "&"}], ",", 
     "testingFileNames"}], "]"}]}], ";"}]}], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"b976f20c-aaaa-4f9e-b731-796d2f78847e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Import", "[", 
   RowBox[{"File", "@", 
    RowBox[{"First", "@", "trainingFileNames"}]}], "]"}], "//", 
  "ImageDimensions"}]], "Input",
 CellChangeTimes->{{3.7396431212209673`*^9, 3.739643147359289*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"fe6bd8c0-663f-4630-8621-cf33d8934ac7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"120", ",", "133"}], "}"}]], "Output",
 CellChangeTimes->{{3.739643135729952*^9, 3.7396431481949453`*^9}, 
   3.739643549915168*^9, 3.7396441235382357`*^9, 3.73965697431929*^9, 
   3.739696408303183*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"34f91dba-873c-4a47-9c76-40803f9aad4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Import", "[", 
  RowBox[{
  "File", "@", 
   "\"\</Users/mehmetsahin/Downloads/SatelliteImages/Testing/\
ODpBAi1TBVBvaW50wSMBAhOrJ8EVmklA5GSwdV05JEAtUwRab29tch+5Dfr4OGE~/\
ODpTCDYuMjMzNi03.png\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7396439732757998`*^9, 3.7396440139631987`*^9}, {
   3.739644343776167*^9, 3.739644346457222*^9}, {3.739644465300364*^9, 
   3.739644483600669*^9}, {3.739646147598063*^9, 3.739646169279684*^9}, {
   3.739646208945277*^9, 3.739646393235332*^9}, {3.739664316413259*^9, 
   3.739664328706561*^9}, {3.739664377408153*^9, 3.7396643901475067`*^9}, {
   3.7396644283234587`*^9, 3.739664474793721*^9}, 3.739704568213902*^9, 
   3.739704614222939*^9},
 CellLabel->"In[24]:=",ExpressionUUID->"574ec43b-d24e-461d-9af8-b5ab63b47242"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxMvdmPZXly3yfYfvCj/wUb0MaZ3qpry33fM+++7/u+35s396X27urumeke
jjjkkARJkZRESTYsgaBESwZhw4sk2IAE+dEbLNsw4Be/+DX8+UZWCX44dbMy
7z33nF9EfOMb8YuI8x9WhpHGv/OX/tJfmv77/BMpn21MJuWL6H/Af+KDabs5
qNcOBrN6sz55Xvl3+eX5h+Pf48jXzy2S6VuyOLFYYWQHsYYdJVoWSHet0L7y
I9+6tJX9jH22dGxbJyWLpAaWLZ9Zis+Ekh3LVeccM2uP7q09fmG54shG3Wsb
da6tXplao3lu9eaFZfl9tXVuzc4lP48tXZrafrBse6GyLe+m7NFKyLaCVduL
NW3loGhPdzK2Fqja852sPV6P2/PtpC3tZmx5L2W907d29fLXrcL1Nbo31h3c
WLUx53tOrVqbWrU6tkplYMPBpU3HtzYc3VqT94753GD22mrdKyt3LqwxvPXX
ev/KItm+xSo3dpIa22agYfvhDt+Xt42jkh1H21bt3Fm5dWWV5qWlufdIpsf9
92zruGIH0Y7tRjhiXQvmZhZMDizDe4qliXXb59auz2w2vrNa7dQa/VvLNy5s
I1i3zUjbFg5KthqoW7A4t1DpzPb47NJh2dZDTTtI9m35IGcLu2lb2s/6zwnW
u9i7s3znxg5Z/+1Q1XbDddsJIbv4wDZPWlx7146iXctWTq0z1v3eWiw/smzj
3KqDe5dpiPvVEeca96N8P/eTrZ1bvopOpHsWzw251jvrs1515FlunVmuzn0n
G1YtT23Uv7dW68JqjTNrsLYV7q3du7LR5IX1hneWyA1s6zBnu4GinSRbrGsX
GYft8UbcFpDp0mHRFg8K9mQzZV+uxWxxL2NbgYp9uRqyaK5vzeELK6M3JelO
ZcZ6Tll7ZIZedVnDWuPU5dxtn1mve8nPpzYYv7R658o66KLLF7lPLt9ba3Br
pfalpVp3FmONj9Hh3XDDjpNdfn9t6fKM+x3YXqBkWfRS66UjUz3jmqq2E27Z
UXpke6zvfnJo4VTfWvy9xfU0q1Mb969tjA4mU223pRPWL5Af2268axt8z1Fm
aFuRlm1FW/7/tWDNIpVz5NtFb+q2ESjbdrhmT7cStsP/C5w7XBjb6lHBAtmB
RbmmWOWMaxjbSWZmicqVxYtn6P8168O983oSa9lhvGlR7DjJeuk1XTtz+WbR
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
H1adTxcM0kwIxcTJ0thr6ry/Gn4dxUdmuH7F9mmwJKv6YfhtRDNR0gPvCVMt
4Tb2cqz6GuxfPF/5goJ6iFTXyWdL6GdD+A/mV1TXo9g42vBclWSq/LXmobRG
b3y/QbXyqZpq67vggPjQABwf4GPO/Dzaw1Jc5FikuRm8lnhVLVoIHprgXrfj
2GisZFniqQTrU1btFhxJuL2Gf//IrdbwAdp//mjHpS7rr54dYq669tinyjNd
Wjzd9By/4p7a6Wsr4ofz6sHiWoTFmq+j/qSN49IDV4PfSL4pYsIUcYPingrY
pR7a5of7uOA8E85Z4NyZGFwaf9lBXml4m/amhZ1t5V0VC4LFXbj3y29+6X5I
e0xeC6x9zfbHWo0Lz+XpECbID6rXQ/MXmgOuu3/nc6Y0a0j5zAyYnQIfUiXV
X+NzUnWfaVJoXVmCeHr/uOL1zfXhK593ofp62bZ6KmrEbRXwva46uKr8A/rE
e/LEFfFU1zEirhkTlVOfx1AkjivBfTX3RzNftHe6o1q0Q+2TV20TWxtht+op
qorXYEPq7Uyga5pxpX5Pr+9mHQ/hRvJ5Nc3DQaZJbKSCPjSJocZX773uWX2n
i8Rdmyc11yf1OO1Eqja6eW+lAf4Obqtc1QSeong6xZqMz9/bGO5ZUQ8Cckui
+xV4RxL8Wt5Les5E85GewtlUo6O9Z9VGq2ZlO1z1mQKH4Qo88Axfc+t5oprO
UdGa1C0ULVm9ferYNBrDXfE55RrXUR9ii/AI8KlYHvr+sNcKcn098KylvCyH
6k1yRcUsdd4zRDce+vpK8KMS1ysulEau8qH7Sc2xQDboRr0jHbnwvH6lfYOs
J74nmNZ8MOXCWFP5Je2vVTqqXwJP0J266kKJexq8DuBi4qLqDS6Ck4fxKpwD
3oUfj2en3sOUIbY48P7asu2CE882H2ZeLO+X8MVxbK/vdatFcE17PeqhLDYu
vXayho/eOam4brbgad0zbBX+O7z6Bnt86fGnsHJ49TVrXbG//OWuLYP9mvu1
GXjoC1RNdANec/rqWxtMsXfwsMN31Yrimvc+P6zhtq06t4n3Hu0cZ33vc+M4
63Wp6p3/bPnEa+lCmgEVqPlsmFXknGtfg4H4YOy2r7pk7FF2mkjXwdtTO7/9
1q7uvnMfXELmiVTVcvkmeoDtaq6PYlnkkcH/JNAH1RXlWBPVjwm/xdOKZeLo
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
u3rWO/q1Q4yZQ8fGp6/9GRdDPTeGmOpYMaY4E/JR74leD+V3NN84Db9ExpHC
wzxxxWDq834KX1QtqXr6xL/0DEv1amj/ZqZnLqqGvnvpfWl67sR2pAT+9G3+
+nvLtucuU+8d7+jZ1Zp3f+ozODQPWvNHNWdX3FncSvar8/XgtF3i2L7Ptj3z
GroG39/m56riNuxfNezqdWmBG+1Kz7KxnKUCCcuEUmB4087hBuFIwXYOki4v
zQ596vubCd83Ukyz+yFXtgd31bPANPNq+P81dZ7NbWbXlv4f8/3OtdvubmWR
opgJAiRA5JxzzmAmRVGh1Wq3bN/29dypmqmp+Tr/8sx69ou3yx9QoCgSBM4+
O++91tVX5X5DmytA1+m1BDM6d+OXUdyo3yGOoT+X0Ptuzj5Y3sLcHbv9YBbC
cYVPxpezN9KQLel1FZN25rankZG+sIexFcha/RVuI/D74ZBKlMaGQcU+OTXu
oNUw62YnDsCW1TP1mi6zGnrAbXG5+qw8453N5zLPxHwkPXxm78B0AMdyPyIf
Jd/Gbtkz65FUFEe0rIaxtQ8f4ND26iLgRbHPSh0L3DX9vbp8EnuE4Ryz12Xd
j7qbyTZH2TGCK55cQc9gxoEfMta9ILeOKgbqsGex+snqYnD5or/T2a23Gzq/
lR2/dH1qq+Drya9yz4jBwAFmT7Siv9GUrxi0Ri6fyLt8POdK2bLr6t/hk7Q7
lW+A/5LZMeYD4d1Eh//wPGDYE8gQHpgI/LqSTVh6g2yZnzli9oCec7KvmHdo
3LlwYVN7ikrfwJo8ALNdd4NZOrAemLOkh4/PqdmswcTbccWPKFZZLDxsArBO
G8zfje4Nj5OcDbyrqPGU9Q3PH/wB6qIB7InsSl46BV7uWbRk9baJYpALxXXn
imGT+ozU3kK6C9QgkC+9SPgd2YGmX3kYzlndid2PM3KJSF3xc113rWV7PsSU
YPAXytI3OPr0nrrEC3pfYL9i18EhZ/+LHkUdrN/6zJ2kmzb3T78QHPlia27x
c7LYM/+QlP2oyw+Te7JPD8/AmDORjueVo2eLXdtHYhaKnbGkfHkoUnRp5TPN
+sxyoSa9fvnfUVt+oNRwrXrf5TN1dxrKuOBp2bCY4TZ9tZ1wG37vKly2mZdX
0iPmCrak2/TusVvoJHxWcGEhWzjB2W8nV9mVX95D59PwKDFDODeecWq+qbV9
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
vymO/ckFYhX3ZOfM4rCn+3r9YM04xvfD8Gsv5NMfjEue3JleZFA2gP1Y4md4
r0/1+8TP4LjBi7Jc3Lt377DRihvO8h5PnPxUQWeJ/ialb0Vm92V3i8WOzuvS
3YAxrjvB/FINXDnFuWCx1KXPSd2foPx+VjpHf2pT+TFc4MxPJ8GF5DMrPi+M
bnRePduPOdX7iSoeTteGNp/J/B7Yn16cMrX+wq70NHBaMN9BDgV3DPwBCzhs
mEfPj6y2Sy+gqPgT7ra79/9QziMbC++U5FGS/EtW45Mdk441dTeYvT4FM0x3
aAP+R/rjzLik25bLUTdgppO9HpuNDFVkU9kVCLsf30Rtho684ID7oc8Zkk7B
TzxdfLReNvgs8Dzm9LmQe6E8Mq4lMJXgsGC+nBoes1nspMJPtKk4aVN/+48b
UfdsJ2d4dE+304YhXVZ+sid/AX9WVXkcs0rwUMHhEdd7zsnXxWQLwAc6V4y5
nF67u9tPyn/OZWdSdr4TxZJggvaH967XuXEF2YPL5RezzfPZtZsoXuiD9SoZ
wzGMTwZTbsEsQIc8Fl6x94Y9CVbMtmLGM32ummSbbimHJ944/+RS4KAuyD9k
Kwodq0myH1tuMbczsHlo9IZaCzWuRKbt7d7qPOB0AXuFegxYLNRL2tJPanQj
eDcvfjac4AIYzPJRCZ0tHCE9w3qc2L7P5ePfbY8Ajpkw+Yr0dy+m82XeYt/L
1dmXZuec/u2x7vurIw8TyMcsQL7oEHVC+JdXV7+4i8uvbiK7MVNuSM5WXOPh
LSTr66uPbjG9tvnNxfKd3veFfELLtZY6G8UL5IPs3QbgpwmULDeifkiNKabc
GlyHUtebueZh84byDfQ4qSNGJWPDgUhUDVtqpFjm+vaL+/Tl7zbrexBKu/nl
Zzc7/2yc0uCc5eQTTg8TLq07ntVrVHUWdflpOFzg3nyn37+9/KA881Z2e+Vm
ynuIXZgTLin3Yf6GmUpmqNkDYL4sD2a2Pneud+kOFNtHZKMyOnP6RzHJ9m04
507Bi1s+GkbO/OKjcWbAAQWPO72Lx0//NG4b8A1n2EPZ6QY91+6F9SKb4A3B
L6a7m1Yc3YYfQJ85J3vBPCCY/ODpByVH+MbYm8CfUnNmhxbZ8jV7W9hsesM+
7oX/TP+O+uChbAQ7UnBfEzdPbn/x+Ccac4tv4FJoNCbG0ztRfsaj3aK/MHW3
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
39z/B7ofWeg=
    "], {{0, 120}, {120, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
    Association[
     "Exif" -> Association[
       "Software" -> "Created with the Wolfram Language : www.wolfram.com"], 
      "Comments" -> 
      Association[
       "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
        "Creation Time" -> 
        DateObject[{2018, 7, 2, 15, 16, 30.}, "Instant", "Gregorian", -4.]]]],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{120, 120},
  PlotRange->{{0, 120}, {0, 120}}]], "Output",
 CellChangeTimes->{{3.7396439791838417`*^9, 3.739643995455798*^9}, 
   3.739644127916275*^9, 3.739644411266827*^9, {3.739644466113654*^9, 
   3.739644485016219*^9}, {3.739646148806944*^9, 3.7396461699582357`*^9}, {
   3.7396462095227003`*^9, 3.73964639362635*^9}, 3.7396569802588873`*^9, {
   3.739664316971977*^9, 3.739664329278933*^9}, {3.739664378042275*^9, 
   3.7396643978343287`*^9}, {3.739664428822541*^9, 3.739664475238312*^9}, 
   3.739696410768911*^9, 3.7397045692478523`*^9, 3.73970461534487*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"43ce7cd6-409d-4ae6-9309-dfeebfa4aff9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxUvdeSZFuOptdG8oKXfAW+xRivhjSaTXedkyKEa6211lp76MiMFEdUVU9P
kXxP8P+wPWrIi50eGcJ974UF4AfwA+t/zXeuy//Dv/zLvwz+Z/1znZv87/1+
bnbzv+g/ofagVmmXiv/WHpYqpf5/yv+P+ub0cv1Pum5iHUvlZxZJDu062rNU
YWXZ8tZy1b3F8ytda4vnVhbNLu3XcNfCGf1uamKJzMRKpZWlUgNLZwaWzw5s
t3uz+eLRmt2l7eZ3dr94sMf1s531vc3waKvB3iatlQ3qC+tWpjZqrmw/fbBJ
c22N4sBG7aUthydrlIa2GJ3s8fib9dsba1bn1u8eLJ8ZWr2y9NdwpGl5fZ3M
jvS6smJtbQl9fRtpWKmysNn0ybr626fzT3s6/bR6baWfNf1e09mhxRMdW67e
rFReWCzRtVxharni3GKpvq6RxTNz/X9thcLShr2zNcozq2Z7NqzP7G71ZKfV
o+2X97bVM/Y6KxuO7iyaaFu2MLZe/2T1xsZa7b1Va0v9/2zN1s5i8ZaFInWr
VubW0hr0dH/93s76/YNV9P+I/j5Xnlu5sbVkfmqF2sbSpaWlchNr6ufD3t7/
ZqTXidap39naYnJvi/G99bSG/dbWRlqnXnNr49G9NRsrrclE8hpZND2WbNd6
v41F0jML6fk+xUf2OTGxXyID+5QY23VqbJ+1B5LZqRWLrPPIMlqbTKxtbT33
cffFzsc3G08OdtTzn6Z3tupt7XH1as/bN1v199YpjqxT0hpUp5L12g7zJ1sP
72w/e7B5f2ed8sRq+b4dls/29vB36+i5kG+vvdOarK1SnAWXZFtv7CSXmdWb
Wh99HUkO7ONVydqdg203+rz5g22m9zbubqyQH1tWa5bWHijpb5vtg74eW0Ly
zOv9alrTgl6RdVZyTmQl6+TUut0Hi0dbWsu9LSdnv8fT+tF2s7PtFvd20P7t
d9aWz2ld0l2rcK/9o3W6ut+29CQ/tESyZTe3ZSvquRfLFzto397d/WZTvV+l
PLZqXfLu7KygPZTW/mhqP2S175J6tnRZz9k7+l5FnuyLTmNpXelGt4EePdt2
+mhjfdagvvKrmOpaIt60dmujvTqwZG5qmdJa+tu3UGJksdzc5XsrOceKGwtL
dz/qZzeJgX24aVi5urHx8Nnquoe+9spUn/90+GHz0cEm/a3tt4821Z5e6jP3
o7NtByfbaM9tB2c7635OkulE99cpDG2u+z5oD27GZ+tUxlZJd6yqtVrp/wv9
/kR7m71a07OjR8i23dxpXRZar5nrXa2+taLWISm9TqYH1uudrFlb2Fh/O9L+
mvRkA3Sf17d1/3ldf49cI9qXvBZKc/8eck/pPdLaB7X2vX2+7UjfpdfaE4fN
N1vP7q0l2zLvb2w7O0m2eg7ZpES0ZuFQxeU5njz4aybbt1t9L55o+del8tSm
syfJ99V/Pp3cWbu9ki5PfT+MZW+qjbXLt6q9HJeNuYm2LZTsWV37tSvZDrVn
kDE63NH6Nasz68k+jDrI4GBLrddmLHsivc1Ixr3u3mLSwbT2SSjetU+hlkX1
POhvJD21m+TY5Xwlmbve6rnj6aENB/e2W323cesg3ZN+yOaeZIMfZZ/vd6+W
T9esnutKf7XPh2dbS7Yz6epc+2mqz+Z7j6sv9rL9Zl/2P+xBz7yVPIfNRaC/
ku9Q7znXvmjXpA/6u4l0/O31/7L5+NkKubEVpHu1+sbtYF3rktF6ZHMjm81f
bTbT72hNe/rMTn1qTelITfY5mwt0vdO7176YS59nkic6zL6QnS8u3B7chDta
l5l80Fw/n9hi8cWm4zsb6J5GraVNJd/l+Ghr2YauvpeKNbR/1raSzZhIhsXS
xOWaSLYtkxu4Xi/0vMi2LP0eyJY3Ze8aejZsaF/P2ZGOYNuzRXzfQLJtWjTV
k58YyjZtZa+m0kfJUn5upH2LDnNNBkeb6VrpPRda16nszFj7YKSvkW+jfdR7
tewq0rLbeE+2WvZE+oudDiUndi0bfR0fux0vaY36kudKa7iePNtSdmSl+9pK
vw7ajwfsV3dts+7KHiW74/TZptKbnWRz0v4cyu/MJI+9/r/WZx/lI55WX+1x
+cXuFs/6O+1N7clKtmsd2e+5/Bi+Ztjdu3zn+kyunmzrdCKfLp1aLF5tpfdo
a883mxvXE/ZuWXaxLVvW0vvUtWfy0vPx/KsNxi/W6t5ZX/skKxnn5d/y0v20
bFixsrZqU/qYnlhavjdfkc3XmqSk86360h7Pv9nj4bt0915+Dj1aS77SJenT
UOvZ1X1WKzOLyzamUh3ZEdkPrfvb2/9tC9ktvl5KxlntvVisbmnJPZ3uyYaP
rSzMkC9OZUPmFtf9h+Nt3Zfsk2wLvqQk214pjyRj2b3WRXcvvhiMMpMMZrID
U93DXJ8zkU/GPvPcf/lQsOX+D+vpmf/yqWw3MT2Tni+E/urKlOXntAb50tRW
66+2kzw2kyc763Wp/bKSfZhp/54k46l0cDPc22704Pq90louOif9zlFyfrCD
rk33ZFvti2fJ5dvhN/uyZi882Ey2dKa9N9a6jbV+ba3VSP/fruSztt9lo8El
G70KP8kOjbWmHXz47rvrV1MyyGrNEtInnr2uNWhKR0boh/ZiUXYczFLUlZGP
TeviNV9dB7ZJNiGr50zltcbyvx9vWrLdK9lo2WTtz9VM9kh2aiW9HQlLIPMq
96Q929bnlQoj4biFlaW/eentVLZ6I71Fl1aS60z/z+j+QrclrfvIGtr7VelM
Lj/RHupbUra40z3KhmjNc0P9juxAsiM7tXYMVsUOab9ytWWfZ/J9+OGWnrGv
dRhKnkPdx0TPiz40dH9XNzXHFAvZWzBoSLINxWRT9IxR2eiE8HREtiqle8hX
JtbSe7C2u9mrMJF8u/R5VF1KHw+2kF9Zy1aMm0srya9NOveyF2f9XzZFa4uc
d+NH6fFC+2Jn346/29v+p307/SZ/rPcQZt5ITh19Dva5Jh2c6v0OwmYDvT9y
bctW5bQWdcm+mOtLf5a237zKNwufhsp65pP767rs2UzvxdXRHizp8/NV+en6
XjLeSY74uqW/5iobv/g6kZs53iSOyCmOKNcCGdSrC2vItuLTp3r/kWxLS36h
ov1QkoyJH4qSGVdXz4b+8IoOIfO15JyWTuOna3qfd9niV5Atr4lkV3tE8hMO
KEtv8/gh6XZJ+2UwOlpvKHswFm7ugo9Pfr374XS8YYVM121VTbrel15g++N6
z5ns1nD8ZNF4x/1rVDY6r+eNCyffJoZ2FdWe0+9FFR/kta74so7WeSS7sZIv
Xksnp4oF5tLL+UD7Rnqelj+v6z1aWp+usG1HOjKS7xvob+fovNZpr7X/Liy5
kwyXuued7N5ZWHsrLD3QfY+1PkPZhorWLKN9XJR/JT5CZ3KptvygbPz6xZoV
YeJsx+qKsb6//t2+PP3Nnw/d5hm70omqbAnyzRDTFRbS3f8u27L2X0ly53nD
yWBvN/tPVpftKVVXjqtrWm9scUPPX5BuZcHdrL/0PyvbHhdW6xO3EKt0g1ds
MvLNZqQzws9c6NTD/b/b0/M/FJ998/gM+1DWM1WIjYr4ZX2m5D2XjdzKXqaE
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
j7I7Me3JW917TvuR3FXd45umMOpEWFXxD3hD8p0NwR8PNp8/WFuxRl0xR0Tx
841+NyKdiyWb0uWlDfV7s8mdy7fdFO7S+5VkL8Dmn2X7w9RMJIubSEd/I1tE
TUb3PJW+3B1/OsZpSgfI5yDfhPQUOYaEM+OSUQQ/Ijv3jldS+ZXwzN5z49g4
sAprlpYdikpnqD3lZLfzpbUVdOUl66zWu6h9ViC21V7qyt9XpD/pWEv2o+f/
3woHriR7ZJjV3idX1dZeLsuW14UZR1rTifxcVc8GtkHveW3K73s9Qb70WrqX
Iz+y+W6rwx/CBWvPcSRkc2NpYiPtcf1+AvnKn0bxXYp9S/KbcelogjhXP0cn
amCSSNPzDw3Ju1gYul1sSBfrijOywg1XtyW7jQayLdRm/noVqShGEe7VvXV0
j0Xdb072qq3362qPN2vLYK8Sq8jGxmWjk8KTMenrp0hN8m3IjgzlN7paw6Ht
dl9tp5ij3xUGbAb1h+n0yWtW6Ba2Ni05xbPECAO7CrcsmdZ9KsbtCNcQjxSo
ZRSwKfKr2ufs9Qg5H2GwvHSvoRipqNeQ8HIc/ZVcb7XXbyWbKNgfny0ZkieJ
JPuy0QO3ax8+lR2rED+ViSe1bomw4qFIw+LC8R2tXU3yzslnI+O59LojnEpc
SW2mSD4y2xcW3Sn2v5fNf/SfVakpShfK+jl7IVcM/GhS69rVe2z2vwmzkIvs
y54MPfeb0b2BDwqSfxzfJZuW1tpTv8nKZtxqryXQZdl96hI57YFPV2X5ilGQ
w7p8bk62JUnuWfdVl6x7Q/JnwngVcBw12IHnAslnkNeoCFvVZDOxmw3FB9Sy
MlqvkGLqENhaeypEbkTyDOlK8NxVaitDr1HgRxvCL43qxLEpOZiBnhEs9TGs
v0lN7VayjUrOIfmej5Iv9eCCZJehJqMYKi39RrbImJpkQns+KpmHqT0JG7dG
z1ZuHbUGfdlN+QXhz0h6+M/6RUn+NiGZxyTTSKzruDEcaXtefyY/vN/8sJ38
0HknvZJ9AyvgT8k983VGfqQg29SqEXdvtVf3FlVcnMvig3suS2Rcp26mZ6zo
9+ZL+d7xWb5l5Dl+YiXinAr1V+1b9ge6X5RM+Rrcw5XOghW0rtoLXPi7GPsu
Hehck3yY8AKyiQqXpLSPwVXoXVvyJLdAzqmje5zJH0/mT9aQv0xLrrmy9Eb+
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
i307/pDP+OZ116YwCTgYWYKFyZuQK2GuD3kUbAFyhQf8PiMFH4x8qSOVZYOw
y/SEFsjXSb596Te9ajexqvfJxPVe9CJ9itTtc6zpfORIXusufEdun7goq3Vr
9J5sMPtui92fiiWf3M7Sp/Phuqqvx55DycCjp6dB6xbk6EeOr5AvvM+KfD1c
wE+hjj5HGFyYiPWlXyWjvVJtH30GBviqeOH+M1sC/vDj/b+7jKlDo8fU2HPM
D1CsnKTeqtcifdmyA+X61uutxJGH+TfZw4XncLpwWsFM0abnT/F31CxD9PnS
sy0bTY9rXPdPPZfcPTlK6gun7Q+7k2x3k0c7z19tqbhjrbjyaf3NhpJvX/7q
bvHF5sIvS9kpvldLdm0/fvRrJxv+vH2RjF/09w8+32soH9rz2Rjak/SHM3+B
PKvuEZuObSdPho1Gzu9cb34OZw6OTbk6cblmpMNxYfhckXrz3Psg4N3fRBrS
I2qzLfmcnscGSa0tdWV8EPwa4hjmqDBPpNQQLm6ffR4FGCwU73tcy5yKUoUZ
cHOLktOPUp8de78N/p5eqorWPZULegdTRWHd2s57lJjFgz8AvxYUH8RkP+Bv
wae8uS47l2U5/yqbv3MsnpT9jDvnjH5h/U1T+Lr75H332JmC88HlR/Jwo7Uu
wohx2fm11hn/5dzUfOB/E9Q70sJUwnoJ+aDP8Z7i8rY/U00yJm84VawCT3SN
vsr23+1+OL/6bvVmD/LzS3oWZBNPi1d976vtpk++DyZgZe3RhfbBF+Jlyfd+
ce+zg07yofTdY3PhUZaZf0RMCw4jF6LL5yjole/hz99f8ctj7HALjnFLPrPj
szeanZX3LDSZSSeZxlLkF+qux/SrZMj31AM/SPxbaZOD6vg6glmR8Y3Pnxj4
rEJmUX6O6OeSWRosi53NzZx7QgyM//X+f3g7hbHnZ9MX/Iv/ZQYeOWbmWnhs
nQnmsX28qrh8yanje7H1vB+1dPB/TmtWo5cFvr18Z1L4Ly6cFb3cJ7MEbqP4
bGF76eRQMS61soH8+XnzZkfJpEJ+8mLrbyRTerWZ1eZ9H/rbCPlj2RZywvAu
8P/E8/PZs8cF2MYufDD5s7r2ykpY8iCfvh4/yGa8WF/P3iIHrLU9SO5r7av7
5aN9Pb75PJGddLLH/I9K0MdYKU2c8+V5FH2v6f0XU5cxuoxety5xEXq8WVLT
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
Jcl3N763R8lzI/nfL+78vEl6VZlRV/K56iu3a6XanfeqxNLCrpwrBQ5mJiPc
R7gcuWVQt83Bn155rhMZN7pn11OfbUneVPESMuf/yJ2L2jN9qOFs0AsRhk8m
WcYu6/3eY3rN2RPMdwbXUFPU3kMvryI9x8Tv9TW+vopS02aG38rjbviJfC7x
JZ8Rl1yRbYZYF35pPVhT7uUqVHdM7OcdSo+JJVpD6WR763FapjAKZqHl+0F/
PTM3wUJp+NqdoKfN5zMunONad519EfaR3+vSt8/ZnN/s59t/SLYnyTjoyyY/
mWfGA2f56f8eB8KzgJ9BjVXruRUmgzu6lyyZd8GsC+xuS/4Y23ze/wzOF4Nv
KX+xkp35cvhuq+7aNl3Optvby/GHnRz/g1/0ecQi+Kcsclk6NyCte2LWA/kh
5vxTu01m516HzsqPkbvAL7f6987tQlfhEXi/JmdD0IdKLhEZSp413U+qsvA4
gd9BtugtfxfMQZ14jgo8jCw4Qwf+CHwWZn6CqyIu24FzB2PeL7dwecM54wxW
eHu8L/mDHPkDyTYKD7gYzHPk/vjMWCLo3SJGAs/BbUlrT32ONIJaB/3t9DvJ
DzarU+del6pz58WTRyJH1Wru3DbPpy+KqYQr9MxlPcOoxVl1D453mH0ELwns
yWwU/B3y5T7Yz8THzE2Cm0F9hD2yn3+xjWKbZz878Lu97t6cMzhmvnZz6+cf
MVsNXlS3EvjkF2G5h9WL7QbaH7ru9TV5HOot9Fhy1tKt7G61fvTaHufxJLXH
yBvAe8w3Dz7TBPwaipI/Xlyw0/z/J0OuArm72uYyByKYHQY2Q76uv6mAUwbf
Fh3HpvK7XDxvhpmrxJGx4KxNZMoFfrqKdPz8HDhlIWR0qS8wN5lYnP56bD+z
GovyUUnpbQpOlNaDWY7MKfE6HL3EwkucN8I8DuJ3xxDkiGpLt9dNxficUYHu
cn4l8xJ7g7PHP6Fw3fkp4OjV4qtNOH9q9OgzJ+hJ30rmzEcqJ5pun+PYIdff
ucdyN94zPrWWYp2ux6nbgGvRpGdNPpQz5aSnz+sv9rCQvZU+v0jGPerzhZnX
NtvSS3wCMp/JlzxvvtqXna79m593RD8IZ75hazjfljpuryts2Dm73BLYLuSH
j60Hc+OpQ8ckY483pONw9pIeBwVzIpBV9pLz4D2QL3u1IdlyjsKnWMv1N6vf
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
/YxcegzQ23fZUrsmXgb/wBNjjZAv/Pv3OJUcq3M9Lvzl7GWmIboLxnqXvc8X
YhafsNUHuPnJiXPm6W/ZHf5qq80Pn1kw1drB+0vH64EfrmgtavBNJn6GPf49
wVxQejecGxZgdOrRPA86Sn0Fu8v+YyYGF3PT4YUjnzKzvKoLP8+KWJVcZvLC
Sc56z+bU8UDOc1kT5zHR95/J9hx3MccTPYVngnyJHfgamfLK/7mQt+eTqL2z
DtngM+AkbtbfPffJeaNdcq3SjabWeDx5tf70JZgjqHVfz1/8PMxJf+99z8zv
gjfUZgZnW/a8GfS9oav0zyS9n6bvn4FNpI4Gv/aGmbqSL/r6KVxzvYZXTy3T
z9pW7ED/N7l7bDtrh73JXOYGpQtBHQDfi2z5mlyWc0nDzcus0oXnq369broO
1tvCi7rHHrONRg8+u4beE3o6S5eZzQNme7axBUuvATHbhDmLjp3ACx7DkzsK
5o8QwxKPwBPsyZ8VL3NPqeNwFgmyY74YF1wq7peeC3AQa//hc9HjI2IleG30
NaFLWfmLcnXq9h3OTVW+9J1ThyzBl8TmXKlLng0cw9k8Kc53INfi3Nqh91Xu
Dn94vblOvo16Jpxi7UGwBD3e9Ixzhupu/9NnlFNfTHEGlfYt+sKZhVXZKvKJ
EfkCn7FNjCkfWr30fm/QGe0DODQ+G4X+fO1Zvka+5OR97hE1merSOTjIl/2B
Lge27+A5I+TJ5+J3HVfpeq8v0r/6XlfCHlKb5tw4OAAZ6hHoDRwfOGKcNciZ
u8WR18OZkZXU2jLXOnPJTabrAVcI+cIXAp+n/BzLscf4nOv9eP83n/XsZxHA
IacHgXPea8G5DdlLj1Tcc+xD5zDlvTcuyEGPxo/Wlc/nDEY/u5S5z8Ojn9XB
3qh0jl638LgfjgxngDD3WPqEbHOX8405LwBOWZ55S+Wg5gI3fKr1hwOKL/Zc
9/jJa/vwbzN14VNm2QtrMJ9je/jde2PYf/gRzqksNKg9752jERbmJReKTQ1L
l8ip9DvMvHz2Wvgt/jXV8z4w5Au/hN4SfDLn9cCRe5etz+gpTN1HOBeWPtBG
wJnNXPJX5DeQK3YbuX66rftZUOFkkIfMl4L57XDiuvTr0bfK/AftT59XmQv6
tennTWWCOd0BPpi7PMlVcPYmuX3sJLP5+Z2K9J4e06rk8XD6w8+pgs/GTATO
1WsQE1XmLsuMn38w8HuE44kOZC/cPPwy/WTMp+IcZPLUzFWqC1/BO+dcDewy
MsUGe06ceeaSOXxZZAt31vMwxIf4L91v3P3KzPME6AQ8FzjG+91v8qdf/WyD
lPZtpf/is5c+SVZ1zviavTpfDhliG9knMfk5+rev4FTEm37mLpzG2CVnxozG
Xpsz0SfeNwzfErxMbIddxhbCeYS7HPM9Hdjjwvv89MtsXs5w/P/WfGOX8xKT
l1pw9L02y/flh8gfOKcY28a5cHpG+IvDwck5hpxLNqTHGr5vIcgXpguXWgYY
Da5OmXPqZ87fScG9ra/8TLR+b+PnN3NW4Hn7JZhXvnr1PA/n2TI7lXmlV4pr
WStyiNgTzr2KcJYL/GXJHh332cL4p1Jw1ibnNDE/cYheyy5gl5HvO77ia2wz
+svPnOOu92IPxoU7ksRu2pfhS74avOCz5y5zcJEzZ7AWpZeF1oP/DvE0s5yx
oXBhXe+YZ5wceB3uQ6Rvv8jnfohKf7C/cJJli0b9h+DcQ87D0/66BUt7T9jQ
ZQpXmffia2wY/Sb0rDi+rwaze+GGg0tb3bPHRfBysNF8/cvnsttk5kagt7wS
AzOLlHoofb30snMWHec2bJaK108Bdl4vXoU77n0uIT1oPH/mkgeDX0lfNf1Q
5M299u8cGPmVmPCY8PZIMdXr6Yd9uf/d7nZf7E6xBmd/IN/J9NnOD/9uH28q
7jvil9gOHinYG388FS5t6P6oFTIzibkNzPblLK7j4bstdK/witHV91rHO2b2
noWLrX7vZ4jpe2FkBbakDkHvxmUWXsY5ckufbbWWr/T3Fd4ste703hvv2fKz
VktwJBTnFEd+ru5n2boPoZb3dlzJ3kW1B+PFwI+yXpw5w1lH9M9lqa1SQ0OG
5Zn3cWKb87WFy7hQX7r9Yl8XwcaXsxTAztg7OHV+lpRkgCyR87u9Zu2ImcBX
9Ihhl+mfXs6Cs1cHHXionC869TnLT/KZnEHK2ZLIfUCeyXnNSz8zy/uPctQw
184/SlHTl3w5+wxseZg/2mlxrzjyZL+9/M3eHv+wGfPLpANH4ZQx/Di9N1iK
GeBwBrjXsWwjZ9WCRRaKRan3w4Hn7ErqNOSdlswfXb54TEKeCzvsGIpzXC72
GVvtfBLPCXWdY5mQnGLwGSXfMPiSPDX5gguXjXWDl7w//uk+z+vv5KDhZtN/
QH6FWb0l+ioHQT6C8+3J++q94LEkGuQUZi6nksdd2nv02oalc/GeY0uPLRpr
twO8wnms6LmIHdgXfm6PxxsL11t0+PN12WtzzF3CDiecf7xybg94ERm/5yqd
l0ntX/cxucynOiiua144wciT/Nr58Jv2wMlt6pTz6BQ/NrQ+Rbhh1KiznI/G
zE/hg+TYhvIx3xQzPmxkAxbP9iKdnXf0Ga2ZnVePfuZiThiNOWjIl14e5lp/
CtWD+2aGO70nYFfdP/0KbX0+PRGpdNdnA8BtZC7L6MKdpl7M+sP5g7eS9Xho
4/Wpm8scNC7sc144J9k8WbS6kR4vLVpeeX8VPTrgas7PA7+3tLfYXxXpdrV9
9twgfWWceZcp0QNCPZScWc17Q4M+KGFM+gyFC9LEe/S66D2wy/AEOAeoK1mP
Rk8+R8T5ro6p5t6zCX4mPqq2tm6XwZf0oXD+QvrSD8o8FeZrvtcEmeN2pfg6
fqkhvcsXfxyRLtOTu5roWeQnqZkRA90dfngd0/tyvO9g7n1WzNbuNOH9n6xe
O1qlwtwA6XOJ3LFi2Nzcxlq/F8Uap9mzvW7hNL1Yv9y3dZ9zxo42Zd5kaejz
EpvSW/bpte6P2aThC86n3uP9NPDrtLc5uxN8xfwi8JXPJGtxxvvSa+j8jD4q
5w5Tt9QeK3Xv/HyMXyMdi/o5AXP3IQn9XhybTdwuH8yMdnoFmOWbct7yymfU
dZmXwswhfa/fubPN6rsN9Pzk0SrMtxIW+RiS34vU7CrWCObqpXo+ey1T0VpX
g7k+5A+GWnP4XDPp2ajHmSb3bhvob6j5eSfBHE/sE3UN/o55az7TltnerUCv
0/RP5aY+m5r9ih1m7fxsEvI7uWC2e4C/hj6fg/NTOAM6R58kuE1X123e3Lmq
xB5gXPIQ9LlV3+ecVOC8Mnv/4OdW0nvODIGqdGArn72H5895T7INOencz+e/
28Pxu+xUw/tUasjGYz2t003T5/54fRI8nhoG/ALquMxjB4dpfdBhcHcKTF94
P2N+EPAkOMtGfxeVPFL0VTbv7FYy+5XzEzIT77uAI+r5S/mgBP0N5OkrnAO0
8TnN1MGZwQsPiVkm9AbsZ296hie3Sy30kLMt6mv3u79clxRvdezXm7Jk3HRO
eSzZtHKxL31gBjKzcDgX7+R8rzHYtbFxXib5hen8NZjfQb1S+2Dhc+3hXMu/
6W93wqSz1Rery359ln/5V2G3G85xoeaUGXpuhHNFItTVov9vVefd1Fa2ZfHv
NlM11d1u22ShhBIKSKAcUEAgsgGntju8V9PTVfM+6Jn1W+deXs8fKglho7Dv
2XHttU7dBymSQ+fASMG7QK6sa71ybr4C80yBdWDuYE3s89cdnhI7b41z1yPW
gaMP2riMXC7lc+Ml4Odgb4reJdzV+P2hfMW4exuebv/wfCWbOzEXcOk45qH2
nSXqFuWypaVnHN6/B4sGTh6dNfY43M+89VyAfVz6lezRNdsX7tUeejYYdzvy
uuZyshWa4NuyKZrP8FeVwUTps+XgMZA/zJNzgxtvgL1cmLeI3YNmR3XD+Nl7
zefshx/DSf0pLNm1J6fX30DPCbtSB8GdyGdpgb0ow1k2Vg197f1mtAnB+1zN
4PiEz/7Ou3fMy6xzQ12gGLs0R/5duFvTH7tWrPwkn/FiTkx6CdvMTvQ5tuXf
9sBD02NQHOE6GZhPbWisMX31PDVSfuzeTE/+tK/vv1WP+nXVJA8n52kwd21F
vuGU34F+oTnc4cqF+1q2AZtXSfn2mBcco02zCE8Pv+s9v4Tr1TfljzojOzVd
X2fKAc90Rnv+jsAFHCRzDvTVwU6Rk7f7j8aDgjnpwO+s1+xTF8GLoWse3Dy+
Dd8NP0M2qcPBYWFfuPH34W4FB1ocu74x1pvcqxmxBTl95hwYD/3uoBz5fMGK
wqV1qteEK4xZQU3XzVDv5WL9zX0l6tP3+y3bd+vgxDMhbMB3VoEvtdr3tTyV
fdFj5/z22OEmRrLX6LOkXA89ELh2FXevFx/lK57Cy/W3sJ6qNjV3e9SlZN5l
3rxCxF+xV4Q92EVeyE/CwYtuCX6439+YS4teBjfiv/vh5MX1qL9CL6zmvbB1
7AWz440eqPuIxPnYL4k7K/DFrT2r2FPdNZIfWi0+m7vuWr6lp5yuoBz+YLdl
HqRGU+cs09B1Qf+1Zz8HxmwfTBJ2Lk7so71XorOPn+a80G83lxj64d2Nd0zo
c/p69QxV/xcMuc7iIbuVOr8Hsu9Pir/Y95i5EbNn9myJZcbLLK2FU2A3hPkm
eN5yzKM9h5MtZsmZda+FHffMqet1drGYERjDn2gogfU+blDP9I3phqfB3Az0
FcE7YluwR9SQiW5CXfeTM3Qlv4fnq1/CJ9V8cAPCwdxgVxiNivlHz43e75+a
0xssSp44r9cYj9CxOzdnTa+98OwH3puh7Eo8ozdKb4Q+B/0Rzq/1ycnfyOvw
x8xQq+DWB+bmAddcMUY3cqazJ0of2/sUeu+Xqmm+fvrL3EtHzE92TryXz7lG
2wEu4FoTfP7cuwVFczgv7JuPjlevmG7PMuFnTXZcPO+Xrxuixbr6FDXg8Dlg
WNhdlY+2f1b8xTe/UwwCD4R98ffsQlI3VOlj18GxRB7W9PWMD6/FmQk1imvU
+tzvgbNJzvd+/8Q9J7iH2Ik4VL498AzzY6I3Bh893HgjawWisT5VHX0+RNP5
OtT0Htll59qh9wpW5Uyf68PmW3iSfeHWZw9mpbNfk18oKK6y+4wWzs5B177j
nfxGodR3HjMeoLfL68wVu9E6Wlvbin1aeszu06BRqGuMe3qcvDaaoOljemRp
L5TXqXtn9MbzXnaSyorjhdrKOLq8/6auWcXeknxwQbkAPZu403tl3Y7jxsRc
wOy/UxPgMwvmc5k63pJD7ytHYB+d6yU9t9zAQ1zItnO4L9GHZF6jaxz/nJV/
ZXcW3/xOtdpb2Rc8UC7RrSIGF72vsjCugL3bqvVK1+YKo6cUd7mWcU4LZ+op
u89L7xXDmc4MD5/j/iL4XuU81FFzanb06ydoMF56/5QdfjjayJ/B1561Yo8S
X4kOSsEag6px9bpr1YpPOrvUlVfTB/nzaWjL/8K5g77Q23dN1YY911T4deJc
pdJXbb1UPrYKq+lGsfDG+KJeBwz23Pt4Q+X85BH0ilJuFnJ3+jfM4Km7as7d
1xG7ZN7WtWMZmLlK+y6U2nfeTWKnxT1vvfetrWooEJdkr6LOD7hIMOmT8a3q
+2G8xptgP2b2v8xkmb+za8CMEP8Htoo+DrN/917RFlcugQ5EQ/kZOT7/FlwQ
ORnxt9Z9sG/eKS+cPzP3YC+J+LsDXp++XaIB14MbB354+QFqcOzKmcW2vhHj
wIx2VtbIpOe4k8xr8WUZxc6tnZa/N2ZQ1OlDdH/b9HzH1qjoo/lIHxhd8jrc
YeBGHj27KyazAzCFzBnvN78Yi9k/mYdT9BL0HgbUDLo2t3dOZdeZ/Qp4rsP8
WThSHsO+7XSgPL2nnPYcPqYP7lXUiBlgIeGJI5/ieypEvi/ONHafyu6nieY8
eTX2hpcaTlTOa1U1iHuzrRvjfMg/6auws8BekTlw2PsyF9/AfET0x9pNuA+x
14VrPmrKNtwF9NOSXYNqkj+N5I/HurbhQqAfPh3fe4+Y+G59KnoYivvEUs4v
WqeHyuu3lY9vk6+Bs4fzAExuPuKT6NvV6nEOzTxldv7s14GrLFcaRt9LPxwd
r+oovDlUjSt/+P6wYzwUto96marJMh33yh2D2TtnD1bf7yk6ItMna3zRe6Zu
BPtufvGkF2EtwGQ+3LUmLFr3C3OxoDOe7lvBbZbNop+9jDuD6HopRqBH0mnD
0zvT/12Gl8c/wrNuzEXq5pMa+f2g1WnsfTKjII/m/F5tfpN/f4z7FvDp8rvm
pTmNwWlgV7Bb+Tr8MXfu47G7DG4a7Tfz07Q28tORNxOtyNX0Q9isPoaL2YPn
5GBRO3ALs09YibGgr1jF9QbGCn0S8n7zKZA76BZ58jbeHcbnor95xC4OenJ6
f1vK53/OKfbKR28V4IwZmQOdvZvD/DDq6YF1kX/gbyz1fnp9evdwmayjFoB8
K/bd1zn6MXuiXE31ps6u9+LqM+fM8MfB1+JZAfblmuyyL4JuxLU5gNB2Reer
rVwFTtQCulnKk9gP5Zoj/ufKkdsB3WK0T/PZjnzdnXnjOvCLq9bJgJ/KTl2H
stuTTWbm9Tqz0rkxzFfrL8b0xlmT8nx95/gl8Mfw7RFvy9U4/51OY20wVLxo
y7fBTVUmD8VejUvzqxWVVxWat75VOg/WqodHF0xfVbGLs1/Ud1w6mvr/D+D0
g29IMfieXVrZeAqv7Ona+HY4adrGvt0btwOmHV5mdGQv15+t/QkGe6UchJyx
Wh1Ze8K6JnX2Ia9Vxy5l27Fjb3p+4T4HlwqPBZhPYlDNWmtjc7fzd5k3Llb6
zFefw7H8cU72PNBr7yhH3VJNu89rocEif07OsAfXgPWfxu4hg6Uqks+fLD0/
A8/t/Sl9F/Qn0a+ugVFD+w6OKXaQyOcTPHsejLNyqZxyFnAqzDZ6qpXBIe+B
TZdt93Ln5tSh/t1C7zTX9ZkgbvX7zF4u7O/Jf4/0WtTA7J7Bz8bMBl/t2T5x
X9/BzdVv4fbqd/c/jpQnoQtVb19HHRrrRlyH7PFG7/Eu1HpP4c1+3xzb8Olk
9PmJ46dnD/p/t6GjXIx9raE+z1Q55lr5IXXAk+LNZvnimQR4oOvb38N08WLb
1szJcBUmOmOTya01CYc9ft6E2Rh+npFzMvYoD3hNXdvky++LU91mYUu3A3Zb
+U6LcScJ3B+csZxd8KF1a6jNrdk6PVcuohq03IRXhr0//k43HCjXeZvryEet
wmj5KfI8wnUB1ty+PGIhD8Exs7/MfByNEWIfcxHl7G32gxU/S+WF+TwLyWwS
fZ839J/KI+MozVEv/8FMmzwGHaAD+aKdDPj0pbV7f1YeAa8g10Rd19pi9dn7
8NTUsZ640LUy9H4EvdaGMYjX9s/lZBZVk01X86/havUtjLr34cTnl91FdIZu
zFOdqV7o+6O/h52v3IM6SnbSwVyhgTSdymdMv4bl9HO4mLxYp/nu/Cnczdjf
+RQ+3v4armTf8xFzrJdwefXNPRl2GZjn04+lH8b+R+cETSbF69YsfP/yl3KE
+6hRUocfcB52dU6Z0W0lexLv2WdG36a6cP+CGpv6mp48NZB1a72DceE8Gm0y
9jnZ72EHjr3dnUJPz03Czwcn+v1C5/t75J10D29iHAP7UxXZtdqYeX7ofRTw
Z/hEfb/WRWTmVovaW74edb293e+Ya+xtBlz3yLMG8EZc23CSZBTvd3bqIZOR
zy6MrLFea0QcAJp05AtTz0q/mI+G3YwatYjOJzu+9GuKuq7y+Fvm9OYQXXgP
vaaf4Qtfr38Li/kvitdL8yXDGV6src2Xla2xQzz397hTnDp/9sxKfmq5+uoa
u3Mi3wGmq4e2xr3t+KAz+6hcsYvOkc4QPH1oiYLjIfeDDx4sEDMiOLNa1ni9
tGZwz3v+07CSL0Vnxfgq+AJkO7SYfcPG7ltNIydCLb5XdJr3y2h5Kk8cPrmW
cj0lv0Tc5nsg33a/skZvc6pcuW1tHXwh3Ee3H/4MD09/KifU/8mfWdMOjqfx
8Np8L9VWnDtzrXi3sxWxYOnMkn4ss0r6jd7JM2ZyZJ/fBjfYWtq2BeXqNTD8
YEQVJ+BEj/sj6Dv2zQ9DzOU7W+o8uOdJzsK1rjp9R74ezq9S5y7kVL9m4bKi
r4ffra4jt71sN5p9Dt3Bk3LNtbng4T8idsDl8G6/q5jbV90Q9xidW8pfHeh6
YwbWbq7dX61bs3sacTWKExvV8dfYV7akp8V8CkwWMyWw9H3rsczN74dGEloc
LfQ0PZdYWK8BjZV2P2pkV1Vjvs30dcZ63nHihr0zxKDKwnZF/wvt5SzzB/hG
ZFf2ZLArtnSdDJ+YfoeNd0tRvxu/7v34FjwZa8cyerDUJ3sHLce8C/mfjmoa
7AsHRd7YloXnkcygsSP2ZAeUvdy3umbY3wSHaI0qz3CWrgULpchfPlJ+dXP1
1XtfaCV8fvynMdlg4aiLmH9zJsyBR745ejCuHp5K+rXb5PWKWSXVsAXVi2DD
qHfQEYLvaJecraDvXL4Xjunh+KNnRLuy51Ft5b2TkrEb60SjXLUse26KGT++
rSnOy4/KN9ErIz8Ck4594QPE1szowWGgbwHm7sw5Fv28B+XHH40Z8ewZTB4Y
WGu7M+8+d+8GTcUKj4/j3jvnNj2v3LPv7fOq+/SxcUSJLbEhfDb0uzJ/ey61
PXa3frfyjuwrp03PedX73UZ4L79JnXs+fzampGxNvXXEJjXjrZBwLrBbYT+g
uhHuq33FXPOZgT1gRxZ+bnBF5OG5nuvh5/t/hi/yFfS1PihmvWx+Dc+b7+Z9
rOizXypXJnfge1nq+2Juy2zPmMQysTq+BtgFevJV9yo2uuZ0Deszw2sFT0h3
9FExnN19nf/eY1itfw+T88/uv5ObnY2Uy46f3GPk77Fj+tP7hjVW4TRu0Sdq
zm27ueIuZ5YbP3MPRyBauNic3sVKtejN5S+vmAJ+d4ImCZyPunXOiB0z82lz
nuCjZ5eO83pYjRw1POY+/Tl9zBmmPsYfY1dsyT1zYs4rsyZsnZ5pdHvf7LXN
N+HdF3ZM4EaQnYmTYE/AhFUUn/vDW+VTsZ9LrwaM9WHCecP/jzw+S9uXG4+Z
nYDBLMoWJc8diEuj0NLzG9VGq/FjuFU+h67Z4+pL+O35L3NKl0sD8yvWkh7K
WrEQXI13HMAkY1PrmF4q91sa61Dr3PieOTm9HvQV4WsYzL7KJ1+a7wxdgJly
rqnsu1x/D+vrP8Jk8cU7imifwq9Mfx5cFlomZfMULK2Hgj15T5xV/DH7xNxT
13KumdnTd1zKvsM+fJPX/jfG+MGzzZ4Sfps4RF8TPRY4rE4iXxxnFL/MHptj
7vGFeVi55wb/Crei/A6a6dgU/4xP5sbPqY/G1uACmD1t58BXdXXf9XVEbhZx
kwvvqkZsvvxTZ2VfzfNx125qO27pxmPsTG+CnTDsDp8dPXzbl51z2YNaGQ2V
o0w31Kmr5Jsm+nwX/VvlpC/h6eJrqIONpu+Jjju7VIq59JXBGVrLrHVpDj36
Y+j0TpZfjM+kz888jnw6vo+BdbZa3Q/uVbGrepCbWpcGTDc9L7jxG+SgcD/o
uzodvYRm9zHUT+8jz5JsDS9hekY5r8wpeX/wMaDBhNYRj7H7zfV3f8a9nabz
wS68A+x/6/uk9wzWuQtvNfve9I9acR+FXVDObBp3OaueE8qePOYeG/Mcvhdb
7ijX5pwaR5n45ZKucZ7jHL/R2aU3wmxiH+wUO0snkdOGfBsfGLkAr5xLEzfB
/7ErmGrivVd+vJfY8yjhLuJnsDPMtOG7o15Fy5TYSb+Ps9vUezvR54Kb4AHd
KcX8BXzn7AyAnddreXYMftB+fWzbRp6727iXopqQ/K6T8I3Ra/f8En4Fc2Up
L2KGILvu52IshiuWve758nO4ufune65V7wBEDZg6fMXspx2vlZfMomauajvO
KbblPj2z+Gz8MbZNcy84e1NtD3C68G7DlUqtD0/rRHnESP9mIL9YBmsAZrgR
d/Q5v5xbn1FqOL2Xo9bm9eeYX+naVq2XpT5kJ46cWTfsjY1TX43t33F24SGp
zt2HqMj+kSN8nezDzj0/YgZBzwqMSSYnu8IJmCFGn3i2CRcJWEZrQRIP4R7K
9T0/Z3+aHsGVfOF89tEztga6NXqNU/37kepV9AM5ty9oeYDvg19EORr70uCH
2IsZ6DoAJwZXQnf8Yn1psCrsdFL3wXlAfwPeA2uuwK2l7wP9M7Tn4aCsoM9p
TN25dxaps9gBB1cBtw47EEc+52vvmkWOStVy6AIoXhArsCl2JrdK9bCw7evz
+Gq9Z/ZZ4JuEJ5+ajt4lvuJswB5BxJ+hEQv2wLNF8pRKrJHSHItc6tUny774
av4N/vmwHvPj1Dendo28vJf/LxZTW3Hz36rFOTG9TuME6HPCc6frjx70tmpk
MG3sCKGB3NI1gX4pfENgkdGvp7e0u38a9uWDecwcGP9qvF0Sf+Ff67XW3n9q
ldDjPTff6eP6F/3uKvIqyP71ZEbPzBN830nvQfZ9to40+uPsdKIX0VXMBsPF
7ITZMXvy3oOAPwb8IH7ymNn/4pUTsaecqj99ll+4NY8ZOhAleMfRcOzcGIOB
XyL+YlviL/6YGIst8cfdJH9KbQzOBG5yeuD4Hm4V86YuvC/A98huBL1X6ooK
vFtg2asx/u4UYh7NPTbmOWwa8ffLmEM3I1cgfcvUttzjp/HPnOO3ik2c4VzC
P0dOhi8w/5Ln1DPPBsiR6JHsKTb/x3/lnDu3da1jU+zLPXbl+6klnBbYHm6T
gmc7l/589IY7fDYwHfm+/XRbcZw98fPBdTjTZ+7oM4/b6Dp8VK4yj9rVye4g
uFF2C/At6K78+wYGZxP6qlWxVbt34/PIXI55L5padw9/hhH5MT47P4xcanrP
J7177xr2R8/mMKiBE4abkpz57Nazf3J/uKt64AiV1y9US+CHObecYR6TQ1ED
57IdXwML5QPY1z3i+iLRS17Yv6Afga4AfR5jhVoRv85ZwqZp3E39cZo3H7mf
emUuCmxFHpXmUtgX26Y9Dsde5VY8n9p7H9+gM+0eTjH2suGrIi8Gs818gZ1P
4jHzU2pDzid2BetmvNshO9tnPrPdPtjMW9scPD07595RAedWjdow5E9Nz48X
YQHHv76rE/2OvaiTVtTaYP/kyNz0ikvk5/gjdJ4Sbl/OMPMXcgbyuTO4lnVj
T40ZIXzbk8mHsKEnx55xKdo2Ty+/ifbC1JpM48knv1fee60efUbcjRl5l2k4
iDky55QbZ5YYzPklBlP/cH7hAsa+4GEqCR4GTnLsi385lY17yhNr5o9ZuT9D
/4o6YCc/iboFsgk8WNS5nFueKxBn4X60fTc+u/hj25e4crLxv+Fn7EtvE9vy
795kBjrP4/CTbPPTfje8gw/OWp5opI8iBxy7PWBI5KOZ27PPjg7PEbm2NZjl
S+k/ww+s98reO3oonF96w5Fr/dw82ey7gqVhd6el6xhODzQbwPqgGzCUf6PP
zF5Wxnz6Q2vGZIgJfE5qhSrcd/Ir2bF9DbkhGH/ylHKy92x+MeZI4w/h4fYf
YciOCLwQhch/01CeDMfxsfGxl8Y/48PxN8Twgvn6ptb0gtvqGNvSc0ePtDF/
7WcsdaYnev/oH7SNB95Y74c+K9cnWFlqErAz9BganWuf2aauR3p9PD7W/9mG
s4vrGZ4ROIDA9sDVyT4fWG9mTOwLyob0KPeZCxNDvKuiulBxCDy07Q6vXOPK
Pbqfd8/cf0UDbRtOTmvfzc1DBycn3y0zvvdwb6EN752JkXfHqN1qaDOwk9WJ
OuTgT8FKgIGjZoUzudpQrce+bWse9azpYSk/t99WTjdFw07X4Rl1rPdGIs9J
uqdPnUUuxT399Lo+SxOeS7CK9JThSQQfz/wdHt9WzL29G6XcDH1Z8HHMXXLU
lLJnjvOPfmX7LuYf9glr3+Ajjfo56B3AMxrzC3T2wO+jUXanfBBMCvtI+B/4
LRbncERujNWrJtxLke9n6t0/fBHnFZuyD2iOL/N6rM3FB/8MnFHoBppP6jhy
SsE/FLmlwFcSQ1c+mxlyZnRjdM0c6X2xr/KOHaIsHNijsLV1qjxYtW924N46
/DP05+E0or8HdyeYMXant1V3R7vrGij3VVvrnHTgKVM+kD8NP+83bbcm9bKu
ATitwXaw53p6yswb/b+Z9269E1wYxJ0f/e2zjnypPuNZ+9p+MmKI1pGzLtmp
AdOOrdObd5J0PTSslXBln8g9+ivcsLG5C9jNgi+0MPR5yqCbekyOya6Nvt/2
rTms0Q8/aur128rDm/Dcyk5VOHvmxh1UqnCm61ocok/5JSx1f6165+Xme1iO
lDPXBmFwtlIcir3Ov+9pezfs+PxV54bnuLn/Bpcy/F30+Ni90xnBnuYIS+zM
PbbHvuz+FqmJ4JEh1lDzyF+WFRPZOXuLP97rqoaVTXf7ntXuKeehP0EeF3lr
IrcleatrM3bGE+44MOfodoIVR/MKrp9CnZjd1f/pmaeAPWYwc2j7od866Mt2
fXTYuuYhh7MB3HDZOe3cewNV6tUqO8HrV17ofKKHmU/28qwbzwws2Uuiv8h5
NaadfVk0gPS6YHPSn83vX43cigfml6ZOvLRN8y129+89C86Cs2spzzpB0/hK
fpW59Fg1ftfzy2we3U3VuTorc3Iy+ZMrnd9r+ec5mLDWTD564pkqtgSHjn0P
K5HbL+XQSHcB8c0Z851PPY/GphV9X9j477blVky4kG1jvht2y9jbYUeCfFLX
+p7O1Dtdw2/pOR10wx723e+pthlaC4OdbLBP7Ats7bU8TyKfwu8dssePJmOX
/sbQ81/2ztCTLzUVT9EEbi3se+EamS8+WRcHrW94RMCk9ZSHgJujd8M+P/0m
7EROm8+i1bmIewhgBR23kjoaTTJqmmSfP9315rH5OaoR41VLMEnkVtackQ8l
h8bGh9mueyRtxXZ68p6h4YfpER1felZYPuHs3ln7krnTzsFQvq0X9aY5Y7r+
8vmRcfST/n1YTeB9+z1cKq8eoxXbvfAOeTmxoblvmafB+YaGbiNilyOGNeqs
lcyJG3XcsCfchNgyB9aFvdzkHJvTr3Pp5+HH8i6vzsUO14deY1fXwA8Hp+GH
fXZ3u1ELnfkitT/8kLlT74DkweNn295zA5/Rta7Z1PqWtXrk5zRmJuESYY+U
fc88OJBMxzN/sILWEwE3WYt9O/aNmDcyLyGXxj/nrYXXDxXqHuUgp/I5Z4ol
nGfOZmrfdIff/O7wIcP59fdzTCzANyecNuymsANiLJ0eg+vlHsyccav02Ohb
tJIeEbNj/LM5pKfudW0f9MN7fBzfj7lm4UmET1Z1h76/UgE+74uwWX6Wr342
RmdI/7YxM6YpZy7cyNOScpmnGGXjohNeZNf17Y1fP+Vu5J5zin3x2fDBcaY5
29gaXjH6rtgYLlL2U97q/WBb734U424Wej9ZtBTgyMjLpsUzz22KR13zIM1m
D2E4vFbslG8o9cKRnm/q/cM7T1+4Y/6QgfU8iKmZQuS0ADPYal94/4Ialvkx
s15mvmAKyZu4pulTgwsAX0+8jvpuS59H5heczT3/m7jj/XeOhpRDh3vqGex7
6rp8YWzcK4bDWLeHcK7XoG4hH95l3gX3IZom3VvjY5gZwoGVxb7kJ/v4s4F5
sJgj8R7gwWJv+JizCWZQrwOPCTuL6LeNrMFw7X62d1ebF6/c5swvOKvZhLcL
+/JzPuGKZ4/CXJpw94FdTs4vtsWm6XO5xsLfHXvo5GfwdB7oevhJZ+uN4qY5
sc0Jp1pCvmZ7qx0yBy35x6Zq9Lb3ioiVF8unsL548Q5Z+2Tm34E5mIxvrE3W
kr+gp1oxB8nE/bcT1bfwTLAPiY4gGLgBWEu9h6x3JSfm8gBLX0w0FakhHj78
jzk2T8gtj4aOpxc3/3jNq9Jdb2JyPuHvBZuZ2hs+JXbJuHbAi8EpAA8nu0tw
/TCbpOfx8PxXmCw/WYfQPBv6jrdUw7/dQVd9ofihulQ+e5880hzDY99TJ9Fn
gd/j1Hisa3+mKpqZ+ixg/Pv6zBPZFn4iuK/KyfXHdVEzt/j1a32Uxpg0pzh0
fyHG2JRXF65O7IldX30zmJtm1CD0/kktnm94Hrfwu/CM8fPuiT5DV/UcWGXO
6Qe9X/qoyn2b1HlDxc6n8PysmnF45ecPM3VzRnW7zLs25lhs+5yuk97q2ue2
4fnmlfms6VGhDcy1kM33Yz+L3zWjVo57Q7oOri6/+3u5mD6HMZzI8qe3H/6y
PfHDf8+zUs0VvjOeO/RZmCZ98lnkv2YuwTV2tjEeBc5GYxcSjohDuMV1TewV
4S/uuEfd7T3q/d86xm7L3kX2+suR74BrJ3LUrSIHIftDsiX4SnrT8Le04HRl
fsUuQSP6cvZ/mGOSszNnabQ3r/Ue73tPvr5QjrtyzELSPDnNqTjP2Jh7cise
w2cKhpJYBRYaHMUPypXgwUZP8x08U83YY+x06INfWx9tMAbvChfGLLx9f6Tr
dRzmOsMD5f1nvbXsONf1fWW+F7QY6Mkeu68auY+ZIR6Zq+HceiHGs8tmaD1b
e4W5Lf3LdtQSwye93WmE4RQ/8Uu4ufoebtdfw1A2oH87nH2Ke1k6p5xXHpvn
pR55n1KeM75/sJ30+9gRpI+CDa1fPbxzn5efwQaxBwke+EjX4y68XMozmYPl
5X87HfklcJX0/eAgKEcte3KlqjnuZs4bmcd34HCGQ0x/H00k9DPQhz3jnMK5
xp4peFz65Wg7wVuR9MGp/cgf6ftxo8frXcZytCl2JMfivKZ1EreUY5fzua3z
us+OPr125YxbyoffsKMtG4MV4LomlpgvrrowJmMAh/f0PnSUBx1VBuHddsX8
MbPFU5ioZu90ZeOOfBR54vRDovP5GHlh9PnJqehJdeAaAMens4k+SA8eBbjz
9NmoVwsJF6/x3DpHT5/+Nzw9/hm+fflX+Pj4h/MUZvjMcF/9b23+yl+Hbfk7
3KeaStg27ecWk9qafmrR/FZza0KB18fOp+MH+zz4auFT4AzB8dyRbYd9nWHl
XDl4vcGqOuazXzI31gJ8IX1GcxwwK9Q1xCyXPMR62vRydE49cyFvQitWdk1t
zD21H7anD4r9z9ilNa43xt2aYh785/nEL6d8u+lZ9vktx72xkrVexuYYOzye
GNsM52cF3JR18mLOSpxsw0sC50/nIpyqjtnR9VBUTgy/Kdfubqbt58BTwgUD
hnty/hwx0Ho9niPmNhMdp5bsOD29CyP4k+Eea649j88k83/rRrC3dP5ibLP5
D6cPYTGKuqGRsy7qYaVnt5TwYqW8bamv865Fcm7NR2f80MLnuan35VxdN3Sp
juUfflYe8uNeM+zIl/G34QAeDz/IPje2TwF9JGYz7NwyGwA3h/5bI+4Llhpg
z6bupbOnTQ7JfgRa9ejq0ePMZGNPnrOazmKwLY8LRxPPX/gd/H19c+ItzWVf
SHxxvv7vXAtObGybxues69WBY1LeugKqbytj7xaxP1b0Xm3cbTjGB5HHg1el
HtKZZEbO7gL4Nb63H7dqfrzPLhK6pfAiySfAmUiNVEm0Q81lpb830rmlt3O/
/CU8b/4Im/WvnsvsooPBDOww8pJVXFvLp8MXVh2HXnvpfXm0j6mND4uRY6Vi
fbuV+8robGBj8wAleXTevGCT/+eb4XHhccqdB2Yff/3u4ES5iGrao4F7qmVr
PS4SH6tzCL4HLgjmVaWheR1K1PRgXKl/zi4ifpR5oF6HvUpydc5KV+exyc4V
tYFqFfh52KHHL3sforY0ngtdeGwMZykcNA3zCEX9IOuJsEOPv2pHjrq0biI2
7xFXdN3QR4aXjX41uSLcN/DNwr3z824r/OcPRXM27SrXsu4tPDRo7/aufZsq
Jh+oJn6zfew5JdwbaMPD/7Ffph95ZtwrPpGcFb6DTifu1bAv+uHq1/BxA6bq
W/jy8V9hefHdMYaYw5mj7jF3IrsR9cgX1Rvde/7N/JUcYifTs05GRZ8bPl7z
IZajRg/1KBgOsOHgr+gL0QsvJ3z5k+VXY3jYy9s8/HeY6edDc92NjbksEze8
bzn2LAFONXqaDfqe7P9zVo56YXenrnjcsrYge7GN5tzXMr2A6eTRs0H2l0/w
nTvNUAPHAq93a2X7oSFUB5tpPbelYw32J+aSd4L3pU8P/8D/AUQxRnQ=
     "], {{0, 120}, {120, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association[
      "Exif" -> Association[
        "Software" -> "Created with the Wolfram Language : www.wolfram.com"], 
       "Comments" -> 
       Association[
        "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
         "Creation Time" -> 
         DateObject[{2018, 7, 2, 15, 16, 31.}, "Instant", "Gregorian", -4.]]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{120, 120},
   PlotRange->{{0, 120}, {0, 120}}], "]"}]], "Input",
 CellChangeTimes->{{3.7396463680409803`*^9, 3.7396463952195272`*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"f8091a92-b296-494b-990d-075b88ef0ac1"],

Cell[BoxData["0.`"], "Output",
 CellChangeTimes->{{3.739646358824539*^9, 3.7396463954683237`*^9}},
 CellLabel->
  "Out[303]=",ExpressionUUID->"d6093e98-2de6-4de3-abd0-13528c99e962"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"testingDataFiles", " ", "//", " ", "Dataset"}], ";"}]], "Input",
 CellChangeTimes->{{3.739644442078629*^9, 3.739644443708956*^9}, {
   3.739646404068161*^9, 3.739646414271463*^9}, 3.7396643048393297`*^9, 
   3.739724460461378*^9},
 CellLabel->
  "In[238]:=",ExpressionUUID->"b7811403-7958-4d99-96aa-e0953d6541f2"],

Cell["\<\
Create a dataset of our training data files so it is easier to visualize:\
\>", "CodeText",
 CellChangeTimes->{{3.739642257145569*^9, 
  3.739642280506071*^9}},ExpressionUUID->"5b33f5a3-216c-471c-a9e2-\
e775cc05da3c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingDataFiles", "//", "Dataset"}], ";"}]], "Input",
 CellChangeTimes->{{3.739646416219776*^9, 3.73964641682049*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"48688ea9-0207-4268-860c-96dfb031cff8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netCNNModel", " ", "=", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
    "NetModel", "[", "\"\<Vanilla CNN for Facial Landmark Regression\>\"", 
     "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "\"\<ActivationAbs4\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7396551613967533`*^9, 3.739655166396806*^9}, {
  3.739655233824065*^9, 3.739655239182741*^9}, {3.739655321102219*^9, 
  3.739655353216674*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"ddbe139b-5d21-4377-b8c3-d272e43826f7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"3\"", "\"3\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["16", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "Conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{16, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {40, 40}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]], "ActivationTangH1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {16, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]], "ActivationAbs1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {16, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]], "Pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 16, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {20, 20}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 20, 20}, 
                    NeuralNetworks`RealT]]], "Conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 16, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{48}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {20, 20}, "$OutputSize" -> {20, 20}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]]], "ActivationTangH2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {48, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]]], "ActivationAbs2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {48, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]]], "Pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 48, 
                    "$InputSize" -> {20, 20}, "$OutputSize" -> {10, 10}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 10, 10}, 
                    NeuralNetworks`RealT]]], "Conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "$GroupNumber" -> 1, 
                    "$InputSize" -> {10, 10}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, 
                    NeuralNetworks`RealT]]], "ActivationTangH3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, 
                    NeuralNetworks`RealT]]], "ActivationAbs3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, 
                    NeuralNetworks`RealT]]], "Pool3_pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    "Fixed", "$Rank" -> 3, "$InputSize" -> {64, 8, 8}, 
                    "$OutputSize" -> {64, 9, 9}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 9, 9}, 
                    NeuralNetworks`RealT]]], "Pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {9, 9}, "$OutputSize" -> {4, 4}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 9, 9}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 4, 4}, 
                    NeuralNetworks`RealT]]], "Conv4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {3, 3}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 4, 4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]], "ActivationTangH4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 3, 3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]], "ActivationAbs4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 3, 3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3_pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3_pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs4", "Outputs", "Output"]}, 
                    "Inputs" -> Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {40, 40}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> Image[CompressedData["
1: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
                    "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    "VarianceImage" -> Image[CompressedData["
1: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
s9sK3P8BbzfPVQ==
                    "], "Byte", ColorSpace -> "RGB", Interleaving -> True]], 
                    
                    NeuralNetworks`TensorT[{3, 40, 40}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart = Null, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "Conv1"}, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"10\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool3_pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3_pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3_pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"9\"", "\"9\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool3_pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {319., {137.9169921875, 143.0830078125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739655187508689*^9, {3.739655235007716*^9, 3.739655240002245*^9}, 
   3.739655355509411*^9},
 CellLabel->
  "Out[318]=",ExpressionUUID->"dd3e46c0-dce0-4eb3-8f68-043e5657928c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetModel", "[", 
  "\"\<Vanilla CNN for Facial Landmark Regression\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.739655372403574*^9, 3.739655373326333*^9}, 
   3.739655949086444*^9},
 CellLabel->
  "In[323]:=",ExpressionUUID->"5aa61712-b344-4b5e-8f18-b5d92a80df94"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"5\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["23", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "Conv1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{16, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {40, 40}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]], "ActivationTangH1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {16, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]], "ActivationAbs1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {16, 40, 40}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]], "Pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 16, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {20, 20}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 20, 20}, 
                    NeuralNetworks`RealT]]], "Conv2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 16, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{48}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 16, "$GroupNumber" -> 1, 
                    "$InputSize" -> {20, 20}, "$OutputSize" -> {20, 20}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]]], "ActivationTangH2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {48, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]]], "ActivationAbs2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {48, 20, 20}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]]], "Pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 48, 
                    "$InputSize" -> {20, 20}, "$OutputSize" -> {10, 10}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 20, 20}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 10, 10}, 
                    NeuralNetworks`RealT]]], "Conv3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 48, "$GroupNumber" -> 1, 
                    "$InputSize" -> {10, 10}, "$OutputSize" -> {8, 8}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 10, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, 
                    NeuralNetworks`RealT]]], "ActivationTangH3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, 
                    NeuralNetworks`RealT]]], "ActivationAbs3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, 
                    NeuralNetworks`RealT]]], "Pool3_pad" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                    "Fixed", "$Rank" -> 3, "$InputSize" -> {64, 8, 8}, 
                    "$OutputSize" -> {64, 9, 9}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 8, 8}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 9, 9}, 
                    NeuralNetworks`RealT]]], "Pool3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {9, 9}, "$OutputSize" -> {4, 4}, 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 9, 9}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 4, 4}, 
                    NeuralNetworks`RealT]]], "Conv4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {3, 3}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 4, 4}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]], "ActivationTangH4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 3, 3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]], "ActivationAbs4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 3, 3}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, 
                    NeuralNetworks`RealT]]], "flatten_0" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 3, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{576}, NeuralNetworks`RealT]]], 
                    "Dense1" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 576}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 576, "$InputDimensions" -> {576}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{576}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "ActivationTangH5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "ActivationAbs5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Dense2" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 100}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Reshape" -> 
                    Association[
                    "Type" -> "Reshape", "Arrays" -> Association[], 
                    "Parameters" -> Association["Dimensions" -> {5, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                    "PostProcess" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "ConstantPlus", "Arrays" -> 
                    Association["Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{2}]], "Parameters" -> 
                    Association["Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ConstantTimes", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyRawArray[{2}]], "Parameters" -> 
                    Association["Dimensions" -> {2}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 5, 
                    "$InputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3_pad", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3_pad", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Pool3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Conv4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dense1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten_0", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dense1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationTangH5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dense2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ActivationAbs5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Dense2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PostProcess", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PostProcess", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {40, 40}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> Image[CompressedData["
1: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
                    "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
                    "VarianceImage" -> Image[CompressedData["
1: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
s9sK3P8BbzfPVQ==
                    "], "Byte", ColorSpace -> "RGB", Interleaving -> True]], 
                    
                    NeuralNetworks`TensorT[{3, 40, 40}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{5, 2}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "Conv1"},
                    NeuralNetworks`Private`NetChain`part = {"Nodes", "Conv1"},
                    NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{16, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {40, 40}, "$OutputSize" -> {40, 40}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 40, 40}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 40, 40}, 
                    NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"40\"", "\"40\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"20\"", "\"20\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"10\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"8\"", "\"8\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool3_pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3_pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3_pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"9\"", "\"9\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool3_pad"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Pool3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"4\"", "\"4\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Pool3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Conv4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Conv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Conv4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"3\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten_0\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"576\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "flatten_0"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Dense1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Dense1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Dense1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Dense1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationTangH5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationTangH5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationTangH5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"ActivationAbs5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "ActivationAbs5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "ActivationAbs5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Dense2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Dense2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Dense2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Dense2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"Reshape\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Reshape"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ReshapeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "Reshape"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "Reshape"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"PostProcess\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "PostProcess"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", 
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "PostProcess"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "PostProcess"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"matrix\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"5\"", 
                    "\"2\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {412., {307.4169921875, 312.5830078125}},
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739655949929392*^9},
 CellLabel->
  "Out[323]=",ExpressionUUID->"0d3c354a-4613-4fb4-bb65-4c0151e2896e"]
}, Open  ]],

Cell["\<\
Define a convolutional neural network that has an \"Image\" NetEncoder \
attached to the input port :\
\>", "CodeText",
 CellChangeTimes->{{3.73964235559569*^9, 
  3.7396423573432827`*^9}},ExpressionUUID->"76a4ef0e-ae8d-4476-a51a-\
891c46321316"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"16", ",", "5", ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}]}], "]"}], ",", "Tanh", ",", "Abs", 
      ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"48", ",", "3", ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}]}], "]"}], ",", "Tanh", ",", "Abs", 
      ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", "3", ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", "Tanh", ",", "Abs", 
      ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"64", ",", "2", ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", "Tanh", ",", "Abs", 
      ",", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"128", ",", "2", ",", 
        RowBox[{"\"\<PaddingSize\>\"", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}]}], "]"}], ",", "Tanh", ",", "Abs", 
      ",", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", 
      RowBox[{"LinearLayer", "[", "1000", "]"}], ",", "Tanh", ",", "Abs", ",", 
      RowBox[{"LinearLayer", "[", "100", "]"}], ",", "Tanh", ",", "Abs", ",", 
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
      RowBox[{"SoftmaxLayer", "[", "]"}], ",", "1"}], "}"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"120", ",", "133"}], "}"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJwdx00og3EAx/GnSdG0ssK8bXnKDtLqSZilPLuYltosxUpWamyajaUpVg6e
cHCZcpokbZIDWuygxYHsYmt5nlbM4uB9DlYrS4rn9z98+/RtGvNY7BKKourF
4M6kTJ+4z+klnMUAu3WrJqi2RW1wO/jtgrPheQ/kKg1zkG4tEO/ar4Lk12o2
YUrtPISFOj4C2SXuAhr5KNG+uNeYFG2hrpXQt7Hl4kXzqncv/JWtL0B5NuSH
xXhVDHpPGGJHm/ES0uZBoqB3J2C/tDQJG2h5GvZGfMS3wHgGHgX2H+Bp5PkJ
DlV/vsDHbOYDcsJuDsZU+TwsExQ/MEdZ/2BoQCcVRN2mcjl0OAsKmO5M0fBY
edsMK7QjGsiyDANLwn4tPLiJE7v48x54NqphoU+m64Nf5gkr+ZkpB7S7h6dh
UZ1dhq+1zAr8B+hhA4w=
  "],
 CellLabel->
  "In[389]:=",ExpressionUUID->"2ef03584-231a-4e69-8b3b-f7eb4c0adc53"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["29", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{16, 3, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {133, 120}, 
                    "$OutputSize" -> {133, 120}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 133, 120}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 133, 120}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {16, 133, 120}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 133, 120}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 133, 120}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {16, 133, 120}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 133, 120}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 133, 120}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {133, 120}, 
                    "$OutputSize" -> {66, 60}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 133, 120}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 66, 60}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{48, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {66, 60}, 
                    "$OutputSize" -> {66, 60}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 66, 60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 66, 60}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {48, 66, 60}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 66, 60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 66, 60}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {48, 66, 60}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 66, 60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 66, 60}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 48, "$InputSize" -> {66, 60}, 
                    "$OutputSize" -> {33, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 66, 60}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 33, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 48, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {33, 30}, 
                    "$OutputSize" -> {31, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 33, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 31, 28}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 31, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 31, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 31, 28}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 31, 28}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 31, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 31, 28}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {31, 28}, 
                    "$OutputSize" -> {15, 14}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 31, 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 15, 14}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {15, 14}, 
                    "$OutputSize" -> {14, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 15, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 13}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 14, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 13}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 14, 13}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 13}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {14, 13}, 
                    "$OutputSize" -> {7, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 13}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 7, 6}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 2, 2}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {2, 2}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 6}, 
                    "$OutputSize" -> {6, 5}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 7, 6}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 6, 5}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {128, 6, 5}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 6, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 6, 5}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {128, 6, 5}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 6, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 6, 5}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 6, 5}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3840}, NeuralNetworks`RealT]]], 
                    "21" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1000, 3840}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 3840, "$InputDimensions" -> {3840}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3840}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "22" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {1000}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "23" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {1000}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "24" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{100, 1000}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 1000, "$InputDimensions" -> {1000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "25" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "26" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "27" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 100}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "28" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "29" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{1, 10}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "29", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {120, 133}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 133, 120}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Scalar", 
                    Association[], 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"133\"", "\"120\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"133\"", "\"120\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"133\"", "\"120\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"133\"", "\"120\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"66\"", "\"60\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"66\"", "\"60\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"66\"", "\"60\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"66\"", "\"60\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"33\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"31\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"31\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"31\"", "\"28\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"15\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"13\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"7\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"6\"", "\"5\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"6\"", "\"5\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"6\"", "\"5\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3840\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"25\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"26\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"27\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"28\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"29\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.739642365819583*^9, 3.739642426998617*^9}, {
   3.73964249600773*^9, 3.739642500684453*^9}, {3.739642567483452*^9, 
   3.739642589023221*^9}, {3.7396427347390013`*^9, 3.739642748385078*^9}, 
   3.739642816282673*^9, 3.739643188038855*^9, 3.739643261360549*^9, 
   3.739643422296289*^9, 3.73964355603572*^9, 3.739644158525799*^9, {
   3.739655776400895*^9, 3.739655792725686*^9}, 3.7396558601528273`*^9, {
   3.739656004158619*^9, 3.739656030783969*^9}, {3.7396561876905823`*^9, 
   3.739656251339128*^9}, {3.7396562822212763`*^9, 3.7396563002597857`*^9}, {
   3.739656336973412*^9, 3.739656392259501*^9}, {3.7396564720502567`*^9, 
   3.739656495272943*^9}, 3.739656586705639*^9, 3.739656646874876*^9, 
   3.739656719195614*^9, 3.739656774309347*^9, {3.739656805343511*^9, 
   3.7396568605901403`*^9}, 3.7396569079202433`*^9, {3.7396570338308887`*^9, 
   3.739657060162876*^9}, 3.739657091200266*^9, 3.739657274332131*^9},
 CellLabel->
  "Out[389]=",ExpressionUUID->"6f9dccb6-3864-4dd9-8614-bc05cfb99196"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"trainingDataFiles", ";"}]], "Input",
 CellChangeTimes->{3.7397244511751337`*^9},
 CellLabel->
  "In[237]:=",ExpressionUUID->"41967255-2987-427c-9144-9590706b60f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"testFile", " ", "=", " ", 
  RowBox[{"trainingDataFiles", "[", 
   RowBox[{"[", 
    RowBox[{"1", ",", "1"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739642870846777*^9, 3.73964288806444*^9}},
 CellLabel->
  "In[391]:=",ExpressionUUID->"1c5d055e-3b09-4ae6-a452-f46389d1741d"],

Cell[BoxData[
 RowBox[{"File", "[", 
  TemplateBox[{
   "\"/Users/mehmetsahin/Downloads/SatelliteImages/Training/\
ODpBAi1TBVBvaW50wSMBAg1ka+YXMEhAsVsEvF~ZKEAtUwRab29tcvjjAIjV3so~/\
ODpTCTE4NDcuNTQtMQ==.png\""},
   "FileArgument"], "]"}]], "Output",
 CellChangeTimes->{{3.739642878365778*^9, 3.739642888834486*^9}, 
   3.73964350109282*^9, 3.739643568510741*^9, 3.7396441681772623`*^9, 
   3.739656992161146*^9, {3.7396570389122677`*^9, 3.739657073145994*^9}, 
   3.739657279859046*^9},
 CellLabel->
  "Out[391]=",ExpressionUUID->"f6560439-6586-4464-ac5d-c2215ea53f93"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"NetInitialize", "[", "lenet", "]"}], "[", "testFile", 
  "]"}]], "Input",
 CellLabel->
  "In[392]:=",ExpressionUUID->"7ab6e1d0-314f-4e3f-b221-1e18352f8fcd"],

Cell[BoxData[
 RowBox[{"-", "0.10336174070835114`"}]], "Output",
 CellChangeTimes->{
  3.73964289622149*^9, {3.7396435027097883`*^9, 3.739643515925486*^9}, 
   3.739643570378289*^9, 3.739644170258333*^9, 3.739656994315486*^9, {
   3.7396570369321747`*^9, 3.739657093698291*^9}, {3.7396572781129723`*^9, 
   3.7396572810230837`*^9}},
 CellLabel->
  "Out[392]=",ExpressionUUID->"e10e6999-2e53-4d5b-9acc-c7bcddab2724"]
}, Open  ]],

Cell["Train the net for three training rounds :", "CodeText",
 CellChangeTimes->{{3.7396429140066147`*^9, 
  3.739642915592347*^9}},ExpressionUUID->"2117d55d-b43a-4341-8c6b-\
4e8649a2d77b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"lenet", ",", "trainingDataFiles", ",", "All", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "testingDataFiles"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "3"}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.739642930004449*^9, 3.7396434387275047`*^9, {3.7396446253901463`*^9, 
   3.739644626775319*^9}},
 CellLabel->
  "In[393]:=",ExpressionUUID->"bc334f20-f774-4d41-921b-fa116a02e74e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"5.3 min\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["1", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["221", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["64", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["670370.7699983394`", "SummaryItem"]}}, 
              BaselinePosition -> Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw1kW1Ik1EYhlXcfghFKbgtYzUxhWwgW6TYPm6bFpljObecZk335VQqjSwF
KQsZimFWrFhKOQOp/diPVeKEbMuFNqjUMCH6QCRxWmkfc1qUFb3PgZfDxXXf
55yXR2A4oTbHREVFZf79/u3MgjPemBGYT8R/5CLDl50tbOIwnIIQ37O54xv5
HXiv95ZqOORFEJ8vSeFPkt+F4XZnTL+RfDYaZ/pCcimXYRmW2U1C1ivK5+Bt
7Lhk+SrlFYiwRwLyYuI8BDz9e1RniPfBIbu1ONVK/f1wFbR9T0slfwCxS9oB
QZi8Eo6umtOPNXS/CqwCf2bLb8Y3H0S0bHxB6Wb6zYVgWbYuXucx+WY1gsPt
nfIHlC+CeNY+qvpMrMFYj9eTtIn6WuycmRoXaIkPgSV83ckLExfj5uBkvHSW
+jqEk0NjUjVxCR66/YUf4ihfimfitPqghfgwrtnlnjY1cRnWT7Nt5V3ER5Bv
y5+rvUN8FBJHa9G7CTpfj1z/nG7lEsMox94tvX1rDQz7ylH1Y5o3QO9DBea3
PX2Uq2DO81VgdOMV99JlhmFAbKPxizWZvAHaTxYj7w31jbh3f+i2LYO8ES3d
nOCvi9Q3IdJR75CIyJvAZetXpmjeMKMu68bzsh7yZrjunpqIpv+BBatNJxX5
ieQt6Dy33VBL80QlGhJU+kGal68SWUMJSR9TyFuh7UnfELdAfSuU69J3O3PI
V+FrxJtnp/f6qqAbqWvo7iVfjf4Xq8cUF8hX47jL9DOVT74GouCTl2tnOfgD
0rbvjA==
                    "]]}, {}}, {}}, ImageSize -> {132, 82}, Frame -> True, 
                  Axes -> None, AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRange -> {{0, 220}, {5.2, 6.2}}, 
                  GridLines -> {{50., 100., 150., 200., 250., 300.}, {{5., 
                    GrayLevel[0.9]}, {6., 
                    GrayLevel[0.9]}, {5.301029995663981, 
                    GrayLevel[0.95]}, {5.477121254719662, 
                    GrayLevel[0.95]}, {5.602059991327962, 
                    GrayLevel[0.95]}, {5.698970004336018, 
                    GrayLevel[0.95]}, {5.778151250383643, 
                    GrayLevel[0.95]}, {5.845098040014256, 
                    GrayLevel[0.95]}, {5.903089986991943, 
                    GrayLevel[0.95]}, {5.954242509439324, 
                    GrayLevel[0.95]}, {6.30102999566398, 
                    GrayLevel[0.95]}, {6.477121254719662, 
                    GrayLevel[0.95]}, {6.602059991327962, 
                    GrayLevel[0.95]}, {6.698970004336019, 
                    GrayLevel[0.95]}, {6.778151250383643, 
                    GrayLevel[0.95]}, {6.845098040014256, 
                    GrayLevel[0.95]}, {6.903089986991943, 
                    GrayLevel[0.95]}, {6.954242509439323, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.73964315386709*^9, 3.739643194567767*^9, 
  3.739643266821566*^9, 3.739643426133651*^9, 3.739643518391814*^9, 
  3.739643572345893*^9, 3.739644411192296*^9, 3.7396445927863817`*^9, 
  3.739645867404615*^9, 3.739657004180952*^9, 3.739657044403754*^9, 
  3.739657075762825*^9, 3.73965725699269*^9, 3.739657602386339*^9},
 CellLabel->
  "Out[393]=",ExpressionUUID->"9dbd8d36-c5f1-4ddd-9e00-8d5d27afc6e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "[", "\"\<TotalTrainingTime\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.739644417522543*^9, 3.739644424078862*^9}, 
   3.73964449079531*^9, {3.739645888705885*^9, 3.7396459348181334`*^9}, {
   3.7396459755579987`*^9, 3.739646007205337*^9}, {3.73964605596876*^9, 
   3.7396460646393414`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"8fad11a1-ad6b-4b12-a1c9-d8a165f8ffbf"],

Cell[BoxData["1230.537855`"], "Output",
 CellChangeTimes->{
  3.739644424748353*^9, 3.739644491694393*^9, {3.739645881519155*^9, 
   3.739645935615604*^9}, {3.73964598155504*^9, 3.739646007584779*^9}, {
   3.73964605635528*^9, 3.739646065483304*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"8c69c020-928f-4c17-bb6c-698d474fdf84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", " ", "=", " ", 
  RowBox[{"trained", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.739646070261177*^9, 3.739646077445765*^9}},
 CellLabel->
  "In[387]:=",ExpressionUUID->"df8516ff-7be7-4802-8691-42743f0bfb18"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"scalar\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["29", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{16, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 16, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {2, 2}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 3, 
                    "$GroupNumber" -> 1, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {128, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {16, 128, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {16, 128, 128}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {64, 64}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{48, 16, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{48}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 48, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 16, 
                    "$GroupNumber" -> 1, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 64, 64}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {48, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 64, 64}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {48, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 64, 64}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 48, "$InputSize" -> {64, 64}, 
                    "$OutputSize" -> {32, 32}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{48, 32, 32}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 48, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 48, 
                    "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
                    "$OutputSize" -> {30, 30}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{48, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]]], "10" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 30, 30}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]]], "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 30, 30}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {15, 15}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {2, 2}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "14" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {64, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "15" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {64, 14, 14}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]]], "16" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 14, 14}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, 
                    NeuralNetworks`RealT]]], "17" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 2, 2}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {2, 2}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "Interleaving" -> False, "$InputChannels" -> 64, 
                    "$GroupNumber" -> 1, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {6, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 7, 7}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 6, 6}, 
                    NeuralNetworks`RealT]]], "18" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {128, 6, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 6, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 6, 6}, 
                    NeuralNetworks`RealT]]], "19" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {128, 6, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 6, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 6, 6}, 
                    NeuralNetworks`RealT]]], "20" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 6, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{4608}, NeuralNetworks`RealT]]], 
                    "21" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1000, 4608}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{1000}]],
                     "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 4608, "$InputDimensions" -> {4608}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{4608}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "22" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {1000}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "23" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {1000}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]], 
                    "24" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{100, 1000}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{100}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> 1000, "$InputDimensions" -> {1000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "25" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "26" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Abs], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "27" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 100}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 100, "$InputDimensions" -> {100}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "28" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "29" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {1}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "20", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "21", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "20", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "22", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "21", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "23", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "22", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "24", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "23", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "25", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "24", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "26", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "25", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "27", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "26", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "28", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "27", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "29", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "28", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "29", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "MeanImage" -> None, 
                    "VarianceImage" -> None], 
                    
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association["Output" -> NetDecoder["Scalar", 
                    Association[], 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"16\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"64\"", "\"64\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"48\"", 
                    "\"32\"", "\"32\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"15\"", "\"15\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"14\"", "\"14\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"7\"", "\"7\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"6\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"6\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"6\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"4608\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "20"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "21"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "22"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"23\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "23"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"24\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "24"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"25\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "25"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"26\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Abs", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "26"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"27\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "27"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"28\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "28"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"29\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "29"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"scalar\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.739646074522499*^9, 3.739646077805539*^9}, 
   3.739657261337678*^9},
 CellLabel->
  "Out[387]=",ExpressionUUID->"7394c4c4-3d75-4715-aace-e70b21950f36"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJxcvceSZOmynQcjOeCQbwDSYAAI3IMju7t0pRaRmZGhtdZa69RZusXpo3CF
XdBoMOOYHMCMc074XM5veVQ2YBzsiojKEHv/rtby3933/1IdRZv/3b/4F/9i
9j/yT7Sy2ptOK5vY/8SLxHDWaQ0b9cBw3mg1ps+r/z3/uf56/A8c6cLIWv0r
qzVnVqpOrFCZWLo4tkC4ZpHsyJKVtWVa95btvLdweWNnuZEFCxOLVpd2lh1a
oXdv1dEHK3TvLZLn/4szy3Vv7YLvfXVestP0wE5SPTuK9+wwxvPk2IK5hZ3n
ZhxTuywuLNG4sYv89vVpeuSPxeFHyw8+WLRxZaHKkt9bW5LfTJZnFkq0LRRr
2GWkZrl8zwaDjfW7Sxv11zZoL2zcXtq0s7ZV79quBje26G6s0+Ma22tr9O8s
X1vZ4WXVDrnGcG5oZ7G2lZo3liqPrd6/sfbw3spN3tu7tayuNdqyIueZ4xxv
F59t3d9Ys9ixTnNs/eHSZlfv7Pbzn+3x53+06fufLFEdW2v63oo9vrOx5noH
1hi/t+Hik3U41/nsxq5uP1n76rMNbn+yi2zPghwn0bqdJ5pWbm8snu1avjG3
Xa7xPDuwi2jTcqz3lHNaDe9sObiyxWBl4+7MOq2p1dtzK7fmVmjMrMqxnjzY
u/mDhTNdKzbnlsx3LJXrIduRJfJDjjHyHdtRpM3azy1Wu7XG4mdkd2+J2tKP
UJFrr8xdnpXhoxX793aZH1m4MrNwdW7nPI+ylruRhu1HO3YY5zzzC/RDujFB
7kN0ZmXJ5q0/l1xfX9Ts2UnR5Z7rv7NofW2RKs+7N5YoTy2F7jW4/k7n2lpN
5B4uWbPBOnfntpgiy9GVrYfXNkfGy9bSrrtXNkJn27WxFQo9a7ZX1h49WJbv
jCHbWLZvx+dFS7GGpcrYVptPtlp9svHozjbrz1ZD5qeHCfRmYw/XP9mn6+9t
UO7atMVv1vt8b9cG3Yn1+wu7efjehrM7a7Zm1kefVpvvbTz7YHnWojd5b+3+
tfUHa7ta3dvd4w82/fyPtvj8T+juwp6fFu3NWdlixbnFS3MrtW4si24cxroW
LmAPia7l0PMx3zMZ3Np8cO0yXnO9M456c2oVfrfSWVgWne+hG5sh+lWdWWt0
i269s0xpbBlkFuNaQ8meHUeatnfZtDcXTTvNzFjnG4sjrxJyPI427PVZHt3q
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
1tls25rEuz5rNlJOHYyczGqvRjlTOAN68+KiYAd8/5twkevpYwNjn5cozF3T
PZ1GN74/UGcNr9//1W4+/NW6+IZCcXtvlSTrqd6i5lc599pT7PLWZ/HpfgVl
9Er1hGV0tzdcez3DavmIDiz8vjTKmWvvUzXzM80Mwvf0VYurmTSzd46n1cel
HORvnh3am6OonYby9i//9e/xCXXvr1IuTfMPivi7qvZ2iWmSs/pqcvBK9eTk
K8KyN17/qB7KIb6+wWNK/dqFod/npy4dAKPlq2uvB3+DTb48qWCrS3DLDf5r
6vxBebASOEmzY4UndY3SPb+/F7hevcJN4qlqNZWHGOg+YOh9f3zr/fs1zYcH
a4kTnmPjp+Aq1bL+6uWl1/9q1pXmtB85R1Ntfs/r/JX3F358FSy4TTt/rkuu
G7DrzHmueiKOolXPw353koZf1dGRpteNabayfK/6adLKP4KLqsihiZ00WfvO
6hO/M/QZYqqrVC2WeJbPj0EXVAMw7GDTla7fp0L7WspZaP88U+S6Sx34/wjc
vXaepHuCiQ9P0SHdc6TNOk3Hjy5fzWBUv6HmRJW0d4ot754m7Lcvju1f/d1z
+/Z1wH7zzT48M4VMql9ng82tx2d1r4wkWKaIXufVL8mjehYVz/W4uvpitw8/
23zz2bmYYzj104DfpoP36NYNsXzuen8KZj6I9H1mrWb+CXPtaPYoWKGn3Az8
TnOzxPt1T6SweFqi61ypPX6Ao2K72GwWPyqsEMROtc+q/NU5h2rOXqrX9yAN
7+pZpA72R666b5X2KKPVW4tUiQ21ewvmrsCDQ9tPEGOy6m1Z+P0ulPdode+t
xvmr5uUypz1pYgP4VTOaNadRNVDekxkixqkmu6j9AeKGfAmyyKFze9KLy7Jz
xrbmAcBpauDAOb5VvvZq+c42c/xlDTyWAVek1Qvc9P085VHk81v4+Tz2UlRt
A7rfFu7TDCnVZsKHpiPdG4Z40r+19eoL3PlhuxeqPh7tEUW1V9px35ItDfHb
QcfsigGaJ1b1uee9X3rKn2bFFb72AWr2n+7nJ/nePf6R2K75J/eO2XW/omvV
FIA3VG8Yg7McKdeI7QRzM+9B1ezHg0TT864JzS7UjOimaplLtntStF38uepz
49rHguucq/eAdTjj8ZKYGMtrPqn6cwb+HvULqTcwVOZ6wFWnWXwJsjrUPmyo
5fdd1Nz5c3zICTqmHq2X2peMduFjc/zSFf6LWF5d+d55ojjxPVDPVWIjmnG0
nUky9nik+ffy+RHNjQDz9hePPr+jNNRv9P2+Bt+d5L0mrQu+73EswUnXYOPb
5Xvw3I1drcDFQzgPNqs6v0s+p3mzHfUcq68cPU+iw0V8UA9uMxo8Yrsbq+Hv
pwNwNFhphpxr5YnfL22iuRbqHcG++x4rNr5ndRmrWOAi57VT6t/VPoDiRixe
c3nKN8q2tWcqTj762g8tOWu253CwBOerbmromG7Y0j2mHra4Xnud4IVj8Nqh
38e067Pz4pznbrjqM4TLrF2Za8iCoUMxZJdV3dkcrrbarqd6I4gRl4mGxwDV
inSnn6zY0D0JBl4PehCs+V58pvPo91Y4Vw9I6xr+u80taS6d+ilPiQ1HSd3b
beizjuRTjiPqJcYna1Yyf9P9wnJgDe0NJtS3hI4fw8E1y93rObyeaOhxvO5z
+nQ8gBPBWUPlZOe+V6J7E2mPXvmnIXKe87cJOGnF6/lQ981bgCeWnv9s8T2R
0sjzYvXOHT56brEk+oSPL6G/LfBqnvVpgumLxIe67oOIP5+qf4q1rXMuI+XT
kX1T80GF7Tif6dVn7AIO8+bCZXxylrGXr8+toB489KDu92eZ2L/71Su7CBX9
7+LXkq3idJ54XszVrVTA1xZajg/n6PAKXdJ8kSLcPgl3b179YBfKH2vPWXPd
W9fe76XZz50OWBKsNui8s3hibOfRgZ0lp/Duts+Q05wT9fGqF1r3MNrgMxab
7225/t7jQQNMLGygGV3qNdC+4wV8Naz7BWivVr2PqYHHXPVTai8skCFuRJFR
EY5WvnFscJlWb8MtHPzeIumxpX32GxikttWX7dzO7YwD2a/qsfL4sVRN9wwa
+ByhAvYuTFjSLM7JJ3DS0rGz7nUzwSauwcCqB9X8+X5nCqbsgWXuiGMTr19V
7jWEDWjefEKYFi6Swo+Fw23LoncN5NviOlXjr16PDlxN91RqYLd6rCH3rno9
dF+/9Ue7evdnj82agXAOBj04ivs9t3TPR59vrxmd2LBkKzn//ttD+1//7qX9
23/33F7tXMLbNsQCsE61x7l2iRUjl+8a/NWsTjx+B+F3Vd3PB5loHrlqSfLd
W+/ZDCPjCvZbhC9VivIDKzu5bHst/AE2duT3Kxl7fc8Yec7wbwt84XJ+b6vJ
jS11T1LtD5QHvlcjHKi5IAX15dY3PlPiDDu4kG/Q/C/ig3y4+qFD+Y3PZQ8V
4ITINI/tl7qc9/izz56OY6/iyKHS9n4Mstvt3LC6z8gKFdVr2yLup+0FvEw1
xrnutdc9aQZUffrBa0fEa2vKL2O7C81NAodJvrp/cZUYrNkMF6y/z/qGo6vv
WX07uo9eAluNxFqWQk/DkYZdXNbA4X0LhUsWAYtewtt0n17F5DrxWTJvIuv5
8qPNrr+AT8r4g5X3d8guC5rLqdwX9h3FPyc4f81R099k3/vIX8ezlwEeE+gn
PKW7dD/T6iiX/ui6pbjfbGz3RCJ59LGMLwdXKmem+c7ajz9T76fmXOvetpr5
HNW9qPCjup9JYuC2q3mRyhno3maT+Qef6/3h8SePX6vh0jbEhn6lZ/lE2fM5
ur+dekovNbcuCXbAh2uvZO+ytrVhzRohViseJ/0eEzM70Qwj5WYLU/ctQc4n
ir22Ru+tqLmFxKOwetzhgMrneN8Z8o5jL5Lvc7DpAbjgXLNitV+jvUZ8tOa8
aV0L4NJMvuNzPVq6jx88Z4Z8F1MwrPY1VDc+e+9zJrVfWPZZd1/8XlbRVNdz
Z7o/coLryRe2+5ThVN0ukPEZNqleEc2F2Kw++7pnky3Hq73ZgwUTVfsWWek9
4kjCefmvsTfIZ2XTPquTv+v5WTBvl5Gyv5avLmkekO5xpB6C2x/s9v1fiN+8
X/3prEHYe7P4Tni81r6Efakn/0LzrSsTz2EksOOi3wsK/if/lFYem5iIHyrB
A4bY/c39n+AEd/zWwu5vv9i4q/sM6j6TfZvj54aq/Ue+4lcH4OgT3bv8suL9
S+of2sPmVCui2ppXPNdcr3B+ew8k3TMhpF43zsf3I6I1nxfhteLq4eX6FU+U
a7v8yvc1c/UU3XyjGXjwAOVAjpJtPzTDbcvbx46FtdbqqSjoHrIcpXwbf0rM
5BiCb69ufvA+ntMQeC3btfHV9x6HNBfkHCyufX1x6EJ56o/qwRiuP4A5y35P
FvHbi1DB+aP654W3ZZcZYmOpxfnGq15Lqp4D5dd1H23h51Pk94K4vOL3xJ9k
s4rTkq/w9Nv9iP3q12/s2bNT29E9Qc7SXhfQUG8MGCdb2NZ06t4MM/V6I58O
uhlLqW8PDoT/j+PLQqyH+rq7/Tuf/+yzBTW7Dv9WBh/GiPWqix2xRupJSYEX
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
lvT+KvKrdd0fuET9PhyPY5vhqpWZ7egaPlRW+nt8kpPvXuMcgNvILmlKr71z
mJS+wk8BXuKdfQ/M1s2dqPPsx203MIstYbZSuSL8VsyAUA/GpzJ/T2+hSWxH
biL/Vyn3DUMB/LoWM56K/ZbTRzfVvbM71WmvDP+rrPsPJ5o2OxWQvDa8afds
L+6e7ScMU38vVDacdP6/Awd2cWJ1ocNExzgDXsjGbOlemXnlzAb1DEuKBdij
ZB40qDwKPOWhcpLpkPkWxamK45utmc0jEq80de6o/5OjF6prLLVshTMifyDZ
MsNt/LHSa2YF2K2m3llGtnCgMifzJJMis1jM/+l5lPU8Wno+BfjH9Nx9uv/j
QN4delPOp/g/X1hzE9fZi4P7SnZ1yEyV7BsYe/QBmLOqSbY9+eKFxWnKyQtN
m8XqyO7h/9gFB/fv9DTnGoozZ8oFevLLY8V6ReX3YD5G2T3i9SePOgMzt70X
dc9e+hWb1AwPjn7Q3f3PigVvZFNvbEZs2FsqBrw03Km6ZAiWTVlyTclXt5T7
NHUNxuCcrXvI2G2LDeF3ai7NBoDlC3YSs5Ienb/nB0mTI/gCcNF+7tN7Tgrr
78eaxiWEnaTWyA4rOobvbyjOLZeo393oOaxspjwWLSiGYqbk3GqDcdk4uHfg
jrAdJD27I8UfYAMXbS5Y50LP6IXOFrhwvP7GSdU9PyraPDA9KPD94rJnLcU3
HdlhdgqYaeQsM4vDDkRbPoZnwVwstvBYsdmhzuHhUdKdhgo2J8UMG1fLYuex
za9P5+td455yQ2YrKrKP2OeRzkCbPh21OtkidlbaOj/oCnhUzMeHQ3nzM8Rn
NqdTn1ttk74ufb760znO5PvWs6DXe+RPSS9nhiEJru+K/fO24re63kvxyrSt
OHfITsWD8tSl/G9DslWuAwa55E4ex0w1vp56JbuR7DN7/GnnOc5KZgWzwQdR
dpTK8mt500m4PCLglsDLbHypTavlBnPwgHSsRwAXaBA8PuWrYN81lKf02rfy
DT3LJXLZpuKXpmLmrp69bAtnLw+mm+Ik5VjPDrO2c0pvI6w47Llslec0LzmW
rS8EL5JH+QO7ruzFwZNr9U3lSHnZVfoMYFvRy6F3tWImA9yP6sh6lVzVXMuw
ejyyPwe+tIvqdTucB+Z0ZAe5wJkFSxO8RXLK5fUPxkeQB2dKMuno2TWY8ZSs
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
rhcbVxbP8Fwa8pfUF4fzt9abO32KCT/XxKiPUYMJ54Zmgzyn8PNWDDsuqdw0
XBjaZwMnsTN9NPwwsIXAvk0rNyq34KLrSm+HyrOuJcOu1VCoUaWeZvoCGX2m
dNfsHbO2PumOL1xeY0zr9SKyjzk9E3rs0xl1hoWebU352cLVuwvLjdjXbSkH
M91P0GeNm+4y082+OPY5rFjlVP4q02QmiXla9q3OLW+wOWLwfdiJlY1sX3x0
3avvDasHzK1s98riffo3zCX4ZUPTej3qfjvsDyiX/fYwJhsQc8/2Y25TsUtU
Z5YdtXa66qatseFoz8BtWsiPyk8d6Dx4QgX59rJi+ZJ7eVCwmUmeSZ56KNim
OsfdFXh+c8WVQ5Nb2eoC5y5CDEhvpHdp8W3f8FLnriMbxSwhPR/2DyOxsmEf
gXGQgBNF58jjX/eurH4iH0WPjhiB3ZVd/e6Z7ENc9w6/5NbTTu8Z2H7gzUu2
qSL2FmzNhuzDRHHthWtPZdeUd8Cryw5CtnFhZ+ZE8Sq7v7z+kezsgWK5oJ5j
C0wz+FWLI8NWG8gngycSV0ydVdxWasgH1JXXSBfpeQRDedt/Yt5/00c/TbFx
fmFchWecXd1fUnYerOnS4No4lEOF0TpfeJofiZSUJ+YWimnAxL60mktOse/o
9jcuLT//0l+0XXR8cJr54EzLbfjS7hvJ9K83g+7fb5+5v3p5bGcsQz1M53BQ
armriXyYzvhAZ3S1emdzTl7mzZmXU/wB7tiWN6vn9Nq14SyQTvIaRfJJ5fjH
YMOTrxiOnJ6d7CC47nnpi2FDwSGm3LJLD0j+yfq4ik3R8bLOJXXbfHWp86gz
r7yL+gsXsQfzix7F7c8VW8J755Mf34EzWucBjEg4AJjve34QNx6k+ujBZjSa
irls1lHyqZgPuDZet0SBve2RO9LZ3wW3R/rF3Dp6dvI0TwDHeFb3k9SzL+r+
4PYEeyyb79pe6vn5G1fV1x75sWRVaYwNw4864e6x/HbtzqWaig8qYCEuDMcy
xSy6zgF4/3A45GTPwNSKwMNgfo8avXxy6cpF8uzMr6xO1JavzXfuLP716z7B
rcj07myXeSecV26SV1ydlexzujLKeekRpZRT1V21OnAT2bBFb+5Gbfhd7txc
usYcGBxj8IEfhKo6rzPDwmbvmc9L/T2Y6bre+QeXkJ0Ff73K3LaeATj0cZ6D
Yg+wcen5dOS72JGEi7is9zGeJtl3cs+m5OE7W3P9wvNObM7MBPnhc29OZ5N7
L9ke4KHiAJ/NO87c9knBdiH89PXk444Nw71i8QE8loUnblku+FpPwY7Rz7bl
s17tyobtJ9we+zCK0Xf0WmBXwgFB3yFDfP6E0wHnA9i6GdkiZgYeHn52y9mD
5dkL2c6Rntf940/G/RqRfY3q/G15S+7orG+YSuxIcG6K9DipV1x/st4JcSKx
Snv2zpV7ikuKcL6Cq3tl5ypTmllPGTwjn3JjOPIaM+mz4rJUE85HdmZ6Vt+m
Tsj8qU8+gVxyA6zlXMuNJvAoyCb3z6VjtzYDzfy0cYTrteOKweAh4/0a/XvD
Hw2Cs6NnWaTfrXiMWdd4dWZ4ulxZMH90Ps9v1xwZtksOtpNk3J2wazcyXG1w
LRIF5vOqipEGyn0e5NNuDZPhROf0WOcUHlv2mjw6u98qpt9U/khe/9K73lXC
b5HDHj3tuCBbcHiYxUVm8ILvyAd+p7zwxXbEZEsv5+VO1HpXxMzMU1GjhNeR
uIo5Es4zc3rgGRGfV+i5wqGTWPOB3klG7P91dIYf3/3e/fnP/9cVius90dNY
y+ahqt0H2TLwDVbGdzxZfFCOfWvzjgVdUcX38N6BYZtVboBdgVO63JZ8wQCW
DqWlTz7FF9TcKsr/8uCayCb55KN2qHUwd6TzzYziN/qMfvkHn2IU73HCOK3h
/qgxI6B7y5f67kw+k9goxd40nItdOCluDVMW/QroWReUzyNbZirBLtpldxds
oEjN+rbwV0bZxVFsDA9rlhkFeHcm964mXc7pszXHdzrPcNg1bS6mMbg3XvGK
4sOUdIb4lt4SuCzsoNi+tXFUt63fvye5nTztuHAfzMl/npdH7szcUjdHpq/2
4iZj5sGQ64nuFd8T1nMpy0bS40ux60Wsp4udYGK+mu6f2Z+y4sWE3r8Afung
xjDAwBxkxxaO13/7X//P/eEPfzQuC3DG0PmacoZMcZ07wakY0fmDVyGl85iw
GslMn0c+RnEDfWxweKndcO7BoTtVnMbuCH4SPHbm/8AjTIIXne/Z2QhI/ifs
1mXXXGHUT8EWYj6a/TBy/oxyucOjuPPJfm/KR/MM9qXfezoH4F/gx1PNa5ew
+vq17deBb8fsCrLdki6Ab/GS2cen5+phNtZLXUKyVy4Cvhq40vCHZxRPFbpP
XJCKN0ZXn2zOgZjnVD+HGwh7zZwEtgmM5zp+c6bcS/oyO3+nc3KrZ7PeT/s8
N8++BLaZmgt9De7D7oHZa3YZqflgl8EKkL4XlZsTR5SkE3Gdb3ocKZ1vcJrh
24VXhh2dagku9aVhkzF/2+7fuLHuJSHZVCojw4taXv3s3n/8g3HQ4G+KjfXF
7GBZ8cAp89jHReeHq9yXVw7ast+j3418jedbz6Cn+B+5xxX3g5lMvX1X+c7B
ccYwY8EVbY6k//C8K46ED+JIOVKqBn/Zwvbxz2UjwBaCE4U5U7BhDk7yltfz
DJAfteX9s6ZxiMANRt8WP5+TnGPyEcwOH8k3ek7pG4xcoDC22tuW4vYN9nDl
M+lFoFcHeubMx9H7OzwruVf+tGKEtisoJmmQL+tZpcCX6YIDemU7J9RwwTbh
e+AS8j0498DYxcYw+0qeCc7sNztRkyv+F7miv9hpejYbOn+HcMgFCu6ZckSP
P2s8peyLw3lYkM2jxpTryYZ2lKcPLgy3F4ynjPxJXLaYmUf0NaF4BBtJTxhd
Qq/IwcA2+f8Ip72K
     "], {{0, 120}, {120, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag[
    "Byte", ColorSpace -> "RGB", Interleaving -> True, MetaInformation -> 
     Association[
      "Exif" -> Association[
        "Software" -> "Created with the Wolfram Language : www.wolfram.com"], 
       "Comments" -> 
       Association[
        "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
         "Creation Time" -> 
         DateObject[{2018, 7, 2, 15, 16, 30.}, "Instant", "Gregorian", -4.]]]],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSizeRaw->{120, 120},
   PlotRange->{{0, 120}, {0, 120}}], "]"}]], "Input",
 CellChangeTimes->{{3.739646078903373*^9, 3.739646095169026*^9}, {
   3.7396461306975203`*^9, 3.7396462446211967`*^9}, 3.739646274963299*^9, {
   3.739646324519318*^9, 3.7396463511966267`*^9}},
 CellLabel->
  "In[388]:=",ExpressionUUID->"f013dd30-4577-4994-8b94-ebb34a8c86a0"],

Cell[BoxData["0.88946533203125`"], "Output",
 CellChangeTimes->{
  3.7396460957281713`*^9, {3.739646131229712*^9, 3.73964624497788*^9}, 
   3.739646275280718*^9, {3.739646324908828*^9, 3.739646349836022*^9}, 
   3.7396572627851057`*^9},
 CellLabel->
  "Out[388]=",ExpressionUUID->"b9c65fbf-0f76-468b-ad83-c08bfc9e2003"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tempnet", " ", "=", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
    "NetModel", "[", "\"\<VGG-16 Trained on ImageNet Competition Data\>\"", 
     "]"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "\"\<relu3_1\>\""}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[426]:=",ExpressionUUID->"1b651804-4e43-4df8-8d0f-d72c490f97a3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"56\"", 
                    "\"56\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["12", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "conv1_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 3, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 3, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "conv1_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{64}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {224, 224}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "relu1_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 64, 
                    "$InputSize" -> {224, 224}, "$OutputSize" -> {112, 112}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 64, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "conv2_2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {112, 112}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "relu2_2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]]], "pool2" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {0, 0}, "Function" -> Max, 
                    "Dimensionality" -> 2, "$Channels" -> 128, 
                    "$InputSize" -> {112, 112}, "$OutputSize" -> {56, 56}, 
                    "$MXPoolingConvention" -> "full", "$MXGlobalPool" -> 
                    False, "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]]], "conv3_1" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 128, 3, 3}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "$InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {56, 56}, "$OutputSize" -> {56, 56}, 
                    "Interleaving" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], "relu3_1" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu1_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu2_2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pool2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv3_1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "relu3_1", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NetEncoder["Image", 
                    Association[
                    "ImageSize" -> {224, 224}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, 
                    "MeanImage" -> {0.4850196078431373, 0.457956862745098, 
                    0.4076039215686274}], 
                    
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu1_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"224\"", "\"224\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu1_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"64\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu2_2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"112\"", "\"112\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu2_2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pool2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"128\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "pool2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"relu3_1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "relu3_1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"256\"", 
                    "\"56\"", "\"56\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7396617010484257`*^9},
 CellLabel->
  "Out[426]=",ExpressionUUID->"68ace686-cf40-497d-a2f4-8c238d41dbcb"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Test the Network", "Section",
 CellChangeTimes->{{3.739482174386187*^9, 
  3.739482180716022*^9}},ExpressionUUID->"363992ed-65d6-4a46-9388-\
9c42d41918e4"],

Cell[TextData[StyleBox["Now ..",
 FontColor->GrayLevel[0.5]]], "Text",ExpressionUUID->"847150e1-f1fb-45c6-bb18-d5b8ffe48274"]
}, Closed]],

Cell["Conclusion", "Section",ExpressionUUID->"92ccd538-e94d-4872-84e7-cfa5924c7e52"],

Cell[CellGroupData[{

Cell["Author contact information", "Section",ExpressionUUID->"a78f6e4f-dbdf-4763-a44f-16569b36e665"],

Cell["Mehmet Sahin", "Text",ExpressionUUID->"44146aed-2d19-4c66-bfba-1e67f1c1dfb3"],

Cell["6/28/2018\[LineSeparator]mehmetmshin@gmail.com", "Text",ExpressionUUID->"42b89b8a-7845-4e69-bcf1-628283f83f62"]
}, Closed]],

Cell[CellGroupData[{

Cell["Further Work", "Section",ExpressionUUID->"658c402b-fd06-4703-b019-cf7fdcc0431f"],

Cell["Mehmet Sahin", "Text",ExpressionUUID->"9e798bcc-6464-4251-bae9-945f2cbc5b51"],

Cell["6/28/2018\[LineSeparator]mehmetmshin@gmail.com", "Text",ExpressionUUID->"34b36ed2-7921-4035-8d22-1b39b858f1c9"]
}, Open  ]]
}, Open  ]]
},
Evaluator->"New Kernel",
WindowSize->{1107, 855},
WindowMargins->{{Automatic, 0}, {Automatic, 0}},
WindowStatusArea->None,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 182, 3, 98, "Title",ExpressionUUID->"755e0098-9782-4df5-8299-7f54266c54d6"],
Cell[765, 27, 91, 0, 20, "Abstract",ExpressionUUID->"db4efd27-b72d-4835-a486-b18956bba0cb"],
Cell[859, 29, 105, 0, 20, "AuthorInfo",ExpressionUUID->"59a63784-4e95-46b9-9a1d-2c013f47161b"],
Cell[967, 31, 71, 0, 35, "Text",ExpressionUUID->"85271f44-5b04-421c-bf31-0395fab10c35"],
Cell[1041, 33, 87, 0, 35, "Text",ExpressionUUID->"a6bd12b6-0886-47fc-9fa5-02f0e3c1bd26"],
Cell[1131, 35, 174, 2, 30, "Input",ExpressionUUID->"22b4bc45-b013-4ce9-96fe-d07a51d37430"],
Cell[CellGroupData[{
Cell[1330, 41, 98, 0, 67, "Section",ExpressionUUID->"35feb7e4-4e93-4e64-abc0-7b0b86e8128f"],
Cell[1431, 43, 201, 3, 35, "Text",ExpressionUUID->"55ddc81f-fcf7-4026-af30-c2c4c901f21b"],
Cell[1635, 48, 87, 0, 35, "Text",ExpressionUUID->"dc3fa30d-000e-45b8-9f6e-f2ffca697a75"],
Cell[1725, 50, 712, 12, 30, "Input",ExpressionUUID->"fc097bea-1c77-45d9-b139-f63fc32e60f7"],
Cell[2440, 64, 153, 1, 38, "CodeText",ExpressionUUID->"d4717b68-e7a9-459d-b0b1-28ff62c78660"],
Cell[2596, 67, 1280, 31, 186, "Code",ExpressionUUID->"bc28cecf-a8f1-44a1-9a88-a545439b7d8a"],
Cell[3879, 100, 169, 3, 38, "CodeText",ExpressionUUID->"7fc79341-27e5-45f6-b25b-6a94bb02c292"],
Cell[4051, 105, 10508, 202, 338, "Code",ExpressionUUID->"0da66e61-053c-44ed-bd6f-ec8918405511"],
Cell[14562, 309, 513, 8, 35, "Text",ExpressionUUID->"4ea8a707-3846-4a26-afa2-9930e6cf1566"],
Cell[15078, 319, 9262, 183, 535, "Code",ExpressionUUID->"4397839f-173c-446c-baa3-710888ff32b1"],
Cell[24343, 504, 574, 8, 35, "Text",ExpressionUUID->"adddfb01-21a0-49b6-a505-59ff331b99aa"],
Cell[24920, 514, 6754, 169, 756, "Code",ExpressionUUID->"d800ec84-0dc8-47ee-815c-81cd07dc295e"],
Cell[31677, 685, 1533, 25, 72, "Code",ExpressionUUID->"bc1a30f6-fb29-427d-8765-418a35a6504f"],
Cell[33213, 712, 198, 3, 38, "CodeText",ExpressionUUID->"82cff098-1e9b-4ea7-96d4-f49811c01086"],
Cell[33414, 717, 3527, 66, 347, "Code",ExpressionUUID->"5fce33a1-1021-4d3d-8485-479547660791"],
Cell[36944, 785, 223, 5, 38, "CodeText",ExpressionUUID->"7239a3fa-7e8e-4f7d-866a-449f2cbce6b8"],
Cell[37170, 792, 756, 19, 72, "Code",ExpressionUUID->"9f4d1e6b-82a9-4913-a2ba-bbafd0ff2fed"],
Cell[37929, 813, 183, 3, 38, "CodeText",ExpressionUUID->"9ff6564b-5c79-4acc-8b4f-41e821cef504"],
Cell[38115, 818, 1291, 23, 129, "Code",ExpressionUUID->"a42fbfa5-bcd2-42d9-a5e0-03d65778d6ca"],
Cell[39409, 843, 249, 6, 38, "CodeText",ExpressionUUID->"a50cd165-655d-4d47-af0b-17bcd8134cea"],
Cell[39661, 851, 793, 18, 72, "Code",ExpressionUUID->"748e53f0-884a-424e-910a-2f234b61ef52"],
Cell[40457, 871, 181, 3, 38, "CodeText",ExpressionUUID->"45e77874-c5bf-4e4c-ae28-188c83e6bbf5"],
Cell[CellGroupData[{
Cell[40663, 878, 551, 11, 73, "Input",ExpressionUUID->"ac1c5322-8a62-4e34-b10a-7d0b570ddfd9"],
Cell[41217, 891, 961, 18, 37, "Output",ExpressionUUID->"f10208e3-3eb2-40aa-a989-3e8eeb67a2c7"],
Cell[42181, 911, 759, 11, 34, "Output",ExpressionUUID->"1526ee9e-42c8-494c-a67c-282590c5af63"],
Cell[42943, 924, 963, 18, 37, "Output",ExpressionUUID->"2e82e3ab-104a-41ec-9fb1-f4eaf3676fdf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[43943, 947, 498, 9, 108, "Subsection",ExpressionUUID->"831f9456-a7b3-4e0a-9d40-289d00e5a43c"],
Cell[44444, 958, 120, 0, 38, "CodeText",ExpressionUUID->"8d3f76fc-7216-445b-9de9-29f45a9ee15f"],
Cell[44567, 960, 1617, 33, 186, "Code",ExpressionUUID->"d24208c3-4ada-4567-b28c-7f512f4ad8f2"],
Cell[46187, 995, 134, 0, 38, "CodeText",ExpressionUUID->"4c349f46-896d-442f-91c9-506e721dae41"],
Cell[46324, 997, 1307, 28, 110, "Code",ExpressionUUID->"992a878a-ece8-4621-9f25-b9bb3ea4aaea"],
Cell[47634, 1027, 207, 3, 38, "CodeText",ExpressionUUID->"b3405eda-1496-44dc-add9-30c3ede8f5f4"],
Cell[47844, 1032, 1262, 26, 110, "Code",ExpressionUUID->"34d04065-ea6f-44ec-b2ed-21d5be51a442"],
Cell[CellGroupData[{
Cell[49131, 1062, 287, 7, 30, "Input",ExpressionUUID->"b74ff110-abd4-41e1-9231-aa3430645b40"],
Cell[49421, 1071, 221, 3, 34, "Output",ExpressionUUID->"a2c88a45-6ad0-4523-94ed-a86a3598fdd6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49679, 1079, 213, 4, 30, "Input",ExpressionUUID->"c0301697-754e-45b9-9554-ce2f37352e40"],
Cell[49895, 1085, 299, 7, 34, "Output",ExpressionUUID->"9d5450a4-571b-4675-b851-0ccbededbb14"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[50243, 1098, 240, 6, 54, "Subsection",ExpressionUUID->"00f8d736-527f-4bf6-b662-db5f231785ae"],
Cell[50486, 1106, 4848, 96, 414, "Code",ExpressionUUID->"b545a918-adfa-43f8-980f-ed3a0b8ac2cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55371, 1207, 190, 3, 54, "Subsection",ExpressionUUID->"05a23029-b3d3-42f8-9e1a-a6762aee3e6c"],
Cell[55564, 1212, 6431, 118, 585, "Code",ExpressionUUID->"45a3f555-28af-4a06-b18a-f941f28f51b8"],
Cell[61998, 1332, 1684, 27, 30, "Input",ExpressionUUID->"5931a2df-e0a2-47f6-bd9e-b486326c4654"],
Cell[63685, 1361, 289, 8, 30, "Input",ExpressionUUID->"fcff796a-0c5b-4cd3-8334-bd5e0d135428"],
Cell[63977, 1371, 381, 9, 30, "Input",ExpressionUUID->"73d692a5-1d4e-41af-bd23-2b4ea5e476c9"],
Cell[64361, 1382, 944, 21, 91, "Code",ExpressionUUID->"f842f7e0-17d2-466c-806f-c4d644cbd074"],
Cell[65308, 1405, 3663, 67, 357, "Code",ExpressionUUID->"1f02c429-3704-42c1-8e6e-7583b4ddf749"],
Cell[CellGroupData[{
Cell[68996, 1476, 6981, 133, 40, "Input",ExpressionUUID->"cd1e5463-248e-422f-a783-7af119dfdb6d"],
Cell[CellGroupData[{
Cell[76002, 1613, 222, 4, 24, "Print",ExpressionUUID->"d437bbe0-a4d1-4fa7-af09-2a9fe831dc90"],
Cell[76227, 1619, 218, 4, 24, "Print",ExpressionUUID->"3b905f8d-8098-4509-b812-0a35597e2ce0"]
}, Open  ]]
}, Open  ]],
Cell[76472, 1627, 980, 25, 129, "Code",ExpressionUUID->"149af149-0a04-4576-9ade-beeda42c29e8"],
Cell[CellGroupData[{
Cell[77477, 1656, 442, 11, 30, "Input",ExpressionUUID->"f586cb5b-178e-47fe-9757-b9d245610e43"],
Cell[77922, 1669, 855, 16, 56, "Output",ExpressionUUID->"290c03c5-4219-46a1-98f2-565304adc7f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78814, 1690, 403, 11, 30, "Input",ExpressionUUID->"0c9e21dd-76a1-4b6e-855c-48f40d8acefe"],
Cell[79220, 1703, 3480, 97, 246, "Output",ExpressionUUID->"dc81243b-fb34-485e-98a3-058fec000fc5"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[82761, 1807, 211, 4, 67, "Section",ExpressionUUID->"69c2789e-757d-42de-8e7a-aa67a7c35b9d"],
Cell[82975, 1813, 404, 7, 35, "Text",ExpressionUUID->"7de5c4c6-a64b-46a1-a690-20421acf8327"],
Cell[83382, 1822, 214, 4, 38, "CodeText",ExpressionUUID->"397141f2-5191-422a-93be-13de607758e9"],
Cell[CellGroupData[{
Cell[83621, 1830, 825, 18, 94, "Input",ExpressionUUID->"15c30300-e287-4825-9e66-2fa1922b0dcd"],
Cell[84449, 1850, 276, 4, 34, "Output",ExpressionUUID->"0b058348-c50c-4941-a577-f6fad6929fd0"],
Cell[84728, 1856, 273, 4, 34, "Output",ExpressionUUID->"c99c177e-e454-4703-a338-649e3463bcc1"]
}, Open  ]],
Cell[85016, 1863, 247, 6, 38, "CodeText",ExpressionUUID->"7aa12ef3-26bc-483c-a725-6d772e623a7f"],
Cell[85266, 1871, 551, 14, 72, "Code",ExpressionUUID->"255aacb6-794c-4ff6-8454-598bc0609fe5"],
Cell[85820, 1887, 189, 3, 38, "CodeText",ExpressionUUID->"b19a2987-604b-4b47-a42b-7b327a644fcd"],
Cell[86012, 1892, 718, 19, 52, "Input",ExpressionUUID->"b976f20c-aaaa-4f9e-b731-796d2f78847e"],
Cell[CellGroupData[{
Cell[86755, 1915, 319, 7, 30, "Input",ExpressionUUID->"fe6bd8c0-663f-4630-8621-cf33d8934ac7"],
Cell[87077, 1924, 321, 6, 34, "Output",ExpressionUUID->"34f91dba-873c-4a47-9c76-40803f9aad4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87435, 1935, 784, 14, 30, "Input",ExpressionUUID->"574ec43b-d24e-461d-9af8-b5ab63b47242"],
Cell[88222, 1951, 50356, 831, 137, "Output",ExpressionUUID->"43ce7cd6-409d-4ae6-9309-dfeebfa4aff9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[138615, 2787, 46655, 772, 75, "Input",ExpressionUUID->"f8091a92-b296-494b-990d-075b88ef0ac1"],
Cell[185273, 3561, 181, 3, 34, "Output",ExpressionUUID->"d6093e98-2de6-4de3-abd0-13528c99e962"]
}, Open  ]],
Cell[185469, 3567, 348, 7, 30, "Input",ExpressionUUID->"b7811403-7958-4d99-96aa-e0953d6541f2"],
Cell[185820, 3576, 227, 5, 38, "CodeText",ExpressionUUID->"5b33f5a3-216c-471c-a9e2-e775cc05da3c"],
Cell[186050, 3583, 238, 5, 30, "Input",ExpressionUUID->"48688ea9-0207-4268-860c-96dfb031cff8"],
Cell[CellGroupData[{
Cell[186313, 3592, 542, 13, 30, "Input",ExpressionUUID->"ddbe139b-5d21-4377-b8c3-d272e43826f7"],
Cell[186858, 3607, 63159, 1246, 76, "Output",ExpressionUUID->"dd3e46c0-dce0-4eb3-8f68-043e5657928c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250054, 4858, 288, 6, 30, "Input",ExpressionUUID->"5aa61712-b344-4b5e-8f18-b5d92a80df94"],
Cell[250345, 4866, 84624, 1675, 76, "Output",ExpressionUUID->"0d3c354a-4613-4fb4-bb65-4c0151e2896e"]
}, Open  ]],
Cell[334984, 6544, 256, 6, 38, "CodeText",ExpressionUUID->"76a4ef0e-ae8d-4476-a51a-891c46321316"],
Cell[CellGroupData[{
Cell[335265, 6554, 2951, 69, 157, "Input",ExpressionUUID->"2ef03584-231a-4e69-8b3b-f7eb4c0adc53"],
Cell[338219, 6625, 83085, 1683, 75, "Output",ExpressionUUID->"6f9dccb6-3864-4dd9-8614-bc05cfb99196"]
}, Open  ]],
Cell[421319, 8311, 187, 4, 30, "Input",ExpressionUUID->"41967255-2987-427c-9144-9590706b60f9"],
Cell[CellGroupData[{
Cell[421531, 8319, 307, 7, 30, "Input",ExpressionUUID->"1c5d055e-3b09-4ae6-a452-f46389d1741d"],
Cell[421841, 8328, 569, 12, 42, "Output",ExpressionUUID->"f6560439-6586-4464-ac5d-c2215ea53f93"]
}, Open  ]],
Cell[CellGroupData[{
Cell[422447, 8345, 191, 5, 30, "Input",ExpressionUUID->"7ab6e1d0-314f-4e3f-b221-1e18352f8fcd"],
Cell[422641, 8352, 415, 8, 34, "Output",ExpressionUUID->"e10e6999-2e53-4d5b-9acc-c7bcddab2724"]
}, Open  ]],
Cell[423071, 8363, 189, 3, 38, "CodeText",ExpressionUUID->"2117d55d-b43a-4341-8c6b-4e8649a2d77b"],
Cell[CellGroupData[{
Cell[423285, 8370, 485, 10, 30, "Input",ExpressionUUID->"bc334f20-f774-4d41-921b-fa116a02e74e"],
Cell[423773, 8382, 6579, 131, 138, "Output",ExpressionUUID->"9dbd8d36-c5f1-4ddd-9e00-8d5d27afc6e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[430389, 8518, 409, 7, 30, "Input",ExpressionUUID->"8fad11a1-ad6b-4b12-a1c9-d8a165f8ffbf"],
Cell[430801, 8527, 333, 6, 34, "Output",ExpressionUUID->"8c69c020-928f-4c17-bb6c-698d474fdf84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[431171, 8538, 259, 5, 30, "Input",ExpressionUUID->"df8516ff-7be7-4802-8691-42743f0bfb18"],
Cell[431433, 8545, 80964, 1644, 75, "Output",ExpressionUUID->"7394c4c4-3d75-4715-aace-e70b21950f36"]
}, Open  ]],
Cell[CellGroupData[{
Cell[512434, 10194, 50399, 834, 75, "Input",ExpressionUUID->"f013dd30-4577-4994-8b94-ebb34a8c86a0"],
Cell[562836, 11030, 319, 6, 34, "Output",ExpressionUUID->"b9c65fbf-0f76-468b-ad83-c08bfc9e2003"]
}, Open  ]],
Cell[CellGroupData[{
Cell[563192, 11041, 376, 10, 30, "Input",ExpressionUUID->"1b651804-4e43-4df8-8d0f-d72c490f97a3"],
Cell[563571, 11053, 46136, 932, 76, "Output",ExpressionUUID->"68ace686-cf40-497d-a2f4-8c238d41dbcb"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[609756, 11991, 161, 3, 53, "Section",ExpressionUUID->"363992ed-65d6-4a46-9388-9c42d41918e4"],
Cell[609920, 11996, 125, 1, 35, "Text",ExpressionUUID->"847150e1-f1fb-45c6-bb18-d5b8ffe48274"]
}, Closed]],
Cell[610060, 12000, 84, 0, 53, "Section",ExpressionUUID->"92ccd538-e94d-4872-84e7-cfa5924c7e52"],
Cell[CellGroupData[{
Cell[610169, 12004, 100, 0, 53, "Section",ExpressionUUID->"a78f6e4f-dbdf-4763-a44f-16569b36e665"],
Cell[610272, 12006, 83, 0, 32, "Text",ExpressionUUID->"44146aed-2d19-4c66-bfba-1e67f1c1dfb3"],
Cell[610358, 12008, 117, 0, 52, "Text",ExpressionUUID->"42b89b8a-7845-4e69-bcf1-628283f83f62"]
}, Closed]],
Cell[CellGroupData[{
Cell[610512, 12013, 86, 0, 53, "Section",ExpressionUUID->"658c402b-fd06-4703-b019-cf7fdcc0431f"],
Cell[610601, 12015, 83, 0, 35, "Text",ExpressionUUID->"9e798bcc-6464-4251-bae9-945f2cbc5b51"],
Cell[610687, 12017, 117, 0, 58, "Text",ExpressionUUID->"34b36ed2-7921-4035-8d22-1b39b858f1c9"]
}, Open  ]]
}, Open  ]]
}
]
*)

